package {
    import flash.display.*;

    public dynamic class AddWidget extends MovieClip {

        public var AddWidgetMCtxt:MovieClip;
        public var bg:MovieClip;

    }
}//package 
﻿package {
    import caurina.transitions.*;
    import flash.text.*;
    import flash.display.*;
    import flash.net.*;

    public class Team extends Sprite {

        public var numTxt:TextField;
        public var teamNameMC:MovieClip;
        public var hitMaskMc:MovieClip;
        public var selector:MovieClip;
        public var ptsTxt:TextField;
        public var arrowContainerMc:MovieClip;
        public var imgContainerMc:MovieClip;
        private var iconFlag:String;
        private var urlReq:URLRequest;
        private var loaderImage:Loader;

        public function init(_arg1:XMLList){
            trace(("code \t\t" + _arg1[0]));
            this.teamNameMC.nameTxt.text = _arg1[1].toString().toUpperCase();
            this.selector.visible = false;
            this.ptsTxt.text = _arg1[2].toString();
            this.numTxt.text = _arg1[3].toString();
            this.iconFlag = (("http://www.fifa.com/imgml/flags/s/" + _arg1[0]) + ".gif");
            this.urlReq = new URLRequest();
            this.urlReq.url = this.iconFlag;
            this.loaderImage = new Loader();
            this.loaderImage.load(this.urlReq);
            this.imgContainerMc.addChild(this.loaderImage);
            this.setOrientation(_arg1[4]);
        }
        private function setOrientation(_arg1:String){
            var _local2:int = Number(_arg1);
            if (_local2 == 0){
                this.arrowContainerMc.gotoAndStop(3);
            } else {
                if (_local2 < 0){
                    this.arrowContainerMc.gotoAndStop(2);
                } else {
                    this.arrowContainerMc.gotoAndStop(1);
                };
            };
        }

    }
}//package 
﻿package {
    import flash.events.*;
    import flash.display.*;
    import Utility.*;
    import flash.utils.*;
    import com.panico.utils.*;

    public class Ranking extends MovieClip {

        public var mcMask:MovieClip;
        public var bgMC1:MovieClip;
        public var bgMC2:MovieClip;
        private var containerTeams:Sprite;
        private var team:Team;
        private var teamCodeStr:String = "";
        private var dict:Dictionary;

        public function Ranking(){
            this.dict = new Dictionary();
            super();
        }
        public function init(_arg1:XML, _arg2:String){
            var position_rank:* = 0;
            var position_node:* = 0;
            var number_nodes:* = 0;
            var new_rank:* = 0;
            var increment:* = 0;
            var i:* = 0;
            var XmlData:* = _arg1;
            var teamCode:* = _arg2;
            this.bgMC1.visible = false;
            this.bgMC2.visible = false;
            trace(("Init called" + this));
            this.teamCodeStr = teamCode;
            trace(("team Selected " + teamCode));
            this.containerTeams = new Sprite();
            this.containerTeams.mask = this.mcMask;
            addChild(this.containerTeams);
            if (teamCode != "null"){
                position_rank = Number(XMLList(XmlData.ranking.rank.(@code == teamCode)).@pos);
                position_node = Number(XmlData.ranking.rank.(@code == teamCode).childIndex());
                number_nodes = XmlData.ranking.rank.length();
                new_rank = 1;
                increment = 1;
                trace(("number_nodes " + number_nodes));
                XmlData.ranking.rank[0].attributes()[3] = new_rank;
                i = 1;
                while (i < number_nodes) {
                    if (XmlData.ranking.rank[i].attributes()[2] != XmlData.ranking.rank[(i - 1)].attributes()[2]){
                        new_rank = (new_rank + increment);
                        increment = 1;
                    } else {
                        increment = (increment + 1);
                    };
                    XmlData.ranking.rank[i].attributes()[3] = new_rank;
                    i = (i + 1);
                };
                if ((position_node + 1) <= 7){
                    trace(("position_node_<=7 " + position_node));
                    trace(("position_rank_<=7  " + position_rank));
                    this.bgMC2.visible = true;
                    this.UpdatebgMC2(position_node, position_rank, XmlData);
                } else {
                    if (((((position_node + 1) > 7)) && (((position_node + 1) < number_nodes)))){
                        trace(("position_node_>7 " + position_node));
                        trace(("position_rank_>7 " + position_rank));
                        this.bgMC1.visible = true;
                        this.UpdatebgMC1(position_node, position_rank, XmlData);
                    } else {
                        if ((position_node + 1) == number_nodes){
                            trace(("position_node_Last " + position_node));
                            trace(("position_rank_Last " + position_rank));
                            this.bgMC1.visible = true;
                            this.UpdatebgMC1Last(position_node, position_rank, XmlData);
                        };
                    };
                };
            } else {
                this.bgMC2.visible = true;
                this.UpdatebgMCALL(XmlData);
            };
        }
        private function UpdatebgMCALL(_arg1:XML):void{
            var _local3:Team;
            var _local2:int;
            while (_local2 <= (8 - 1)) {
                _local3 = this.buildTeam(_arg1.ranking.rank[_local2].attributes());
                _local3.x = 1;
                _local3.y = (27 * _local2);
                this.containerTeams.addChild(_local3);
                _local2++;
            };
        }
        private function UpdatebgMC2(_arg1:int, _arg2:int, _arg3:XML):void{
            var _local5:Team;
            var _local4:int;
            while (_local4 <= (8 - 2)) {
                trace(1);
                _local5 = this.buildTeam(_arg3.ranking.rank[_local4].attributes());
                if (_arg1 == _local4){
                    _local5.selector.visible = true;
                };
                _local5.x = 1;
                _local5.y = (27 * _local4);
                this.containerTeams.addChild(_local5);
                _local4++;
            };
        }
        private function UpdatebgMC1(_arg1:int, _arg2:int, _arg3:XML):void{
            var _local6:Team;
            var _local7:Team;
            var _local4:int;
            while (_local4 <= (5 - 1)) {
                _local6 = this.buildTeam(_arg3.ranking.rank[_local4].attributes());
                if (_arg1 == _local4){
                    _local6.selector.visible = true;
                };
                _local6.x = 1;
                _local6.y = (27 * _local4);
                this.containerTeams.addChild(_local6);
                _local4++;
            };
            var _local5 = 6;
            while (_local5 <= 8) {
                _local7 = this.buildTeam(_arg3.ranking.rank[(((_arg1 - 1) + _local5) - 6)].attributes());
                if (_local5 == 7){
                    _local7.selector.visible = true;
                };
                _local7.x = 1;
                _local7.y = ((27 * (_local5 - 6)) + 149);
                this.containerTeams.addChild(_local7);
                _local5++;
            };
        }
        private function UpdatebgMC1Last(_arg1:int, _arg2:int, _arg3:XML):void{
            var _local6:Team;
            var _local7:Team;
            var _local4:int;
            while (_local4 <= (5 - 1)) {
                _local6 = this.buildTeam(_arg3.ranking.rank[_local4].attributes());
                if (_arg1 == _local4){
                    _local6.selector.visible = true;
                };
                _local6.x = 1;
                _local6.y = (27 * _local4);
                this.containerTeams.addChild(_local6);
                _local4++;
            };
            var _local5 = 6;
            while (_local5 <= 8) {
                _local7 = this.buildTeam(_arg3.ranking.rank[(((_arg1 - 2) + _local5) - 6)].attributes());
                if (_local5 == 8){
                    _local7.selector.visible = true;
                };
                _local7.x = 1;
                _local7.y = ((27 * (_local5 - 6)) + 149);
                this.containerTeams.addChild(_local7);
                _local5++;
            };
        }
        private function buildTeam(_arg1:XMLList):Team{
            this.team = new Team();
            Int21h_light.makeButton(this.team);
            this.team.buttonMode = true;
            this.team.mouseChildren = false;
            this.dict[this.team] = _arg1[0];
            this.team.addEventListener(MouseEvent.CLICK, this.updateUrl);
            this.team.init(_arg1);
            return (this.team);
        }
        private function updateUrl(_arg1:MouseEvent):void{
            var url:* = null;
            var e:* = _arg1;
            trace(("code in update " + this.dict[e.target]));
            url = (((LangFifaCom.getSite()[1] + "/associations/association=") + this.dict[e.target]) + "/ranking/gender=m/index.html");
            var urlTrack:* = "";
            var _api:* = null;
            try {
                _api = root.loaderInfo.loader.root;
                TrackingWidgets.track(url, _api);
            } catch(e:Error) {
                trace("Error for _api variable ");
                TrackingWidgets.track(url, null);
            };
        }

    }
}//package 
﻿package mx.core {

    public namespace mx_internal = "http://www.adobe.com/2006/flex/mx/internal";
}//package mx.core 
﻿package mx.core {

    public interface IFlexAsset {

    }
}//package mx.core 
﻿package mx.core {
    import flash.utils.*;

    public class ByteArrayAsset extends ByteArray implements IFlexAsset {

        mx_internal static const VERSION:String = "4.1.0.16076";

    }
}//package mx.core 
﻿package {
    import flash.display.*;

    public dynamic class Clock_sx extends MovieClip {

        public function Clock_sx(){
            addFrameScript(0, this.frame1, 9, this.frame10);
        }
        function frame1(){
            stop();
        }
        function frame10(){
            stop();
        }

    }
}//package 
﻿package {
    import flash.events.*;
    import caurina.transitions.*;
    import flash.text.*;
    import flash.display.*;
    import com.panico.utils.xml.*;
    import com.panico.utils.events.*;
    import events.*;
    import com.masteca.utils.utilities.*;
    import Utility.*;
    import flash.utils.*;
    import com.hybrid.ui.*;
    import com.panico.utils.*;
    import flash.external.*;

    public class Main_New extends Sprite {

        public var MoreNewsMC:MovieClip;
        public var titlemorenewsMC:MovieClip;
        public var mcFreccine:MovieClip;
        public var titleUpdateMC:MovieClip;
        public var titleHeaderMC:MovieClip;
        private var oXmlVoc:XML;
        private var Voc:Vocabulary;
        private var oXmlConfig:XML;
        private var news:News_New;
        private var currentTeamStr:String;
        private var urlFeed:Array;
        private var oXml:Array;
        private var xmlFeed:XmlManager = null;
        private var nXML:int = 0;
        private var pattuma:Array;
        private var ranking:Ranking;
        private var myTimer:Timer;
        private var delayTyme:Number = 3600000;
        private var mcClock_sx:Clock_sx;
        private var mcClock_dx:Clock_dx;
        private var ttSx:ToolTip_Win;
        private var ttDx:ToolTip_Win;
        private var _api:Object = null;
        private var tlv:TeamsListView;
        private var firstTime:Boolean = true;

        public function Main_New():void{
            this.urlFeed = new Array();
            this.oXml = new Array();
            super();
            if (stage){
                this.init();
            } else {
                addEventListener(Event.ADDED_TO_STAGE, this.init);
            };
        }
        private function init(_arg1:Event=null):void{
            alpha = 0;
            removeEventListener(Event.ADDED_TO_STAGE, this.init);
            this.myTimer = new Timer(this.delayTyme, 1);
            this.myTimer.addEventListener(TimerEvent.TIMER, this.udpateDataFeed);
            this.pattuma = new Array();
            LangFifaCom.environment = "prod";
            LangFifaCom.language = "en";
            this.currentTeamStr = "null";
            this.currentTeamStr = "ita";
            this.config();
            this.setUrlFeed(this.currentTeamStr);
            this.setOXml(this.urlFeed.length);
            trace(LangFifaCom.language.toLowerCase());
            this.oXmlVoc = new XML(Global[LangFifaCom.language.toLowerCase()].label);
            this.Voc = new Vocabulary(this.oXmlVoc);
            this.readXmlFeed(0);
        }
        private function config():void{
            var _local1:Object = LoaderInfo(this.root.loaderInfo).parameters;
            if (((!((_local1["environment"] == undefined))) && (!((_local1["environment"] == null))))){
                LangFifaCom.environment = _local1["environment"];
            };
            if (((!((_local1["lang"] == undefined))) && (!((_local1["lang"] == null))))){
                LangFifaCom.language = _local1["lang"];
            };
            if (((((!((_local1["teamId"] == undefined))) && (!((_local1["teamId"] == null))))) && (!((_local1["teamId"] == ""))))){
                this.currentTeamStr = _local1["teamId"].toLowerCase();
            };
            trace(("TeamId " + this.currentTeamStr));
        }
        private function xmlFeedLoadedembedded(_arg1:XmlManagerEvent):void{
            if (_arg1.loadOk()){
                trace(("config feed " + _arg1.getXmlManager().getXml().embedded));
                this.oXmlConfig = _arg1.getXmlManager().getXml();
                this.readXmlFeed(0);
            } else {
                trace("Errore caricamento config xml");
            };
        }
        private function setUrlFeed(_arg1:String):void{
            this.urlFeed.push("/xmlfeed/widgets/rank/fullrank.xml");
            this.urlFeed.push("/xmlfeed/widgets/news/ranking.xml");
        }
        private function setOXml(_arg1:int):void{
            var _local3:XML;
            var _local2:int;
            while (_local2 < _arg1) {
                _local3 = new XML();
                this.oXml.push(_local3);
                _local2++;
            };
        }
        private function readXmlFeed(_arg1:uint):void{
            var _local2:String = (LangFifaCom.getSite()[0] + this.urlFeed[_arg1]);
            trace(("PathFeed " + _local2));
            this.xmlFeed = Int21h_light.sendAndLoad(_local2, null, this.xmlFeedLoaded);
        }
        private function udpateDataFeed(_arg1:TimerEvent):void{
            trace((("runOnce() called @ " + _arg1.target.currentCount) + " ms"));
            this.nXML = 0;
            this.readXmlFeed(this.nXML);
        }
        private function xmlFeedLoaded(_arg1:XmlManagerEvent):void{
            if (_arg1.loadOk()){
                this.oXml[this.nXML] = _arg1.getXmlManager().getXml();
                if (this.nXML == (this.oXml.length - 1)){
                    this.buildUI();
                } else {
                    this.nXML++;
                    this.readXmlFeed(this.nXML);
                };
            } else {
                trace(("Errore caricamento xml" + this.nXML));
            };
        }
        private function destroy_All():void{
            var _local1:int;
            while (_local1 < this.pattuma.length) {
                removeChild(this.pattuma[_local1]);
                _local1++;
            };
            this.pattuma = new Array();
        }
        private function buildRank(_arg1:XML, _arg2:String):Ranking{
            if (this.pattuma.length > 0){
                this.destroy_All();
            };
            trace("Rank Populate");
            this.ranking = new Ranking();
            this.pattuma.push(this.ranking);
            this.ranking.init(_arg1, _arg2.toLowerCase());
            return (this.ranking);
        }
        private function buildNews(_arg1:XML):News_New{
            var _local2:Sprite;
            if (getChildByName("mcNews") != null){
                _local2 = (getChildByName("mcNews") as Sprite);
                removeChild(_local2);
            };
            this.news = new News_New();
            this.news.name = "mcNews";
            this.news.init(_arg1);
            return (this.news);
        }
        private function buildUI():void{
            var _local2:News_New;
            var _local1:Ranking = this.buildRank(this.oXml[0], this.currentTeamStr);
            _local1.x = 9;
            _local1.y = 56;
            addChild(_local1);
            if (this.oXml[1].news[0] != null){
                _local2 = this.buildNews(this.oXml[1].news[0]);
                _local2.x = 12.6;
                _local2.y = 304.4;
                addChild(_local2);
            };
            if (this.tlv != null){
                if (this.tlv.isOpen){
                    addChild(this.tlv);
                };
            };
            if (this.firstTime){
                Tweener.addTween(this, {
                    alpha:1,
                    time:0.4,
                    transition:"linear"
                });
                this.firstTime = false;
                if (this.currentTeamStr != "null"){
                    this.buildFilterControl();
                };
                this.buildAllSageText();
                this.addWidgetButton();
            };
            this.myTimer.start();
        }
        private function buildAllSageText(){
            var format:* = new TextFormat();
            this.titleHeaderMC.txt.text = this.oXmlVoc.word.(@tcode == "titleWR");
            this.titleUpdateMC.txt.text = ((this.oXmlVoc.word.(@tcode == "update") + " ") + this.oXml[0].ranking.@date.toString());
            this.titlemorenewsMC.txt.text = (this.oXmlVoc.word.(@tcode == "titleFR") + " »");
            Int21h_light.makeButton(this.titlemorenewsMC);
            this.titlemorenewsMC.addEventListener(MouseEvent.CLICK, this.goRanking);
            this.MoreNewsMC.txt.text = (this.oXmlVoc.word.(@tcode == "morenews").toUpperCase() + " »");
            Int21h_light.makeButton(this.MoreNewsMC);
            this.MoreNewsMC.addEventListener(MouseEvent.CLICK, this.goNews);
        }
        private function goNews(_arg1:MouseEvent):void{
            var url:* = null;
            var e:* = _arg1;
            url = (LangFifaCom.getSite()[0] + "/worldfootball/ranking/news/index.html");
            var urlTrack:* = "";
            var _api:* = null;
            try {
                _api = root.loaderInfo.loader.root;
                TrackingWidgets.track(url, _api);
            } catch(e:Error) {
                trace("Error for _api variable ");
                TrackingWidgets.track(url, null);
            };
        }
        private function goRanking(_arg1:MouseEvent):void{
            var url:* = null;
            var e:* = _arg1;
            url = (LangFifaCom.getSite()[0] + "/worldfootball/ranking/lastranking/gender=m/fullranking.html");
            var urlTrack:* = "";
            var _api:* = null;
            try {
                _api = root.loaderInfo.loader.root;
                TrackingWidgets.track(url, _api);
            } catch(e:Error) {
                trace("Error for _api variable ");
                TrackingWidgets.track(url, null);
            };
        }
        private function buildFilterControl(){
            this.mcClock_sx = new Clock_sx();
            this.mcClock_sx.x = 265;
            this.mcClock_sx.y = 37;
            this.mcClock_sx.buttonMode = true;
            this.mcClock_sx.addEventListener(MouseEvent.CLICK, this.clock_sx_click);
            this.mcClock_sx.addEventListener(MouseEvent.MOUSE_OVER, this.clock_sx_over);
            this.mcClock_dx = new Clock_dx();
            this.mcClock_dx.x = 238;
            this.mcClock_dx.y = 37;
            this.mcClock_dx.buttonMode = true;
            this.mcClock_dx.addEventListener(MouseEvent.CLICK, this.clock_dx_click);
            this.mcClock_dx.addEventListener(MouseEvent.MOUSE_OVER, this.clock_dx_over);
            this.mcClock_dx.gotoAndStop("l_over");
            this.mcClock_dx.useHandCursor = false;
            addChild(this.mcClock_sx);
            addChild(this.mcClock_dx);
        }
        private function addWidgetButton(){
            try {
                this._api = root.loaderInfo.loader.root;
            } catch(e:Error) {
                trace("Error for _api variable ");
            };
            var addwidgetButton:* = new AddWidget();
            trace(("_api ADD WIDGET exist " + this._api));
            addwidgetButton.AddWidgetMCtxt.addEventListener(MouseEvent.CLICK, this.morewidgets);
            addwidgetButton.AddWidgetMCtxt.buttonMode = true;
            addwidgetButton.AddWidgetMCtxt.mouseChildren = false;
            addwidgetButton.AddWidgetMCtxt.txt.autoSize = TextFieldAutoSize.LEFT;
            addwidgetButton.AddWidgetMCtxt.txt.text = (this.oXmlVoc.word.(@tcode == "add").toUpperCase() + " +");
            addwidgetButton.bg.width = addwidgetButton.AddWidgetMCtxt.txt.width;
            addwidgetButton.x = ((300 - addwidgetButton.width) - 5);
            addwidgetButton.y = 374;
            addChild(addwidgetButton);
            this.tlv = new TeamsListView(this.oXml[0]);
            this.tlv.addEventListener(TeamStrEvent.TEAMSTR, this.apiShow);
        }
        private function morewidgets(_arg1:MouseEvent):void{
            addChild(this.tlv);
            trace(("morewidgets " + this.morewidgets));
            this.tlv.open();
        }
        private function apiShow(_arg1:TeamStrEvent):void{
            trace("apiShow");
            trace((("team selected " + _arg1.myTeamStr) + "#"));
            this.tlv.close();
            var _local2:EmbedArea = new EmbedArea(this.Voc, _arg1.myTeamStr);
            addChild(_local2);
        }
        private function clock_sx_click(_arg1:MouseEvent):void{
            var zone:* = null;
            var XmlFilterForZone:* = null;
            var xmlFilterForZoneXML:* = null;
            var temp_Ranking:* = null;
            var e:* = _arg1;
            e.target.useHandCursor = false;
            e.target.gotoAndStop("l_over");
            this.mcClock_dx.useHandCursor = true;
            this.mcClock_dx.gotoAndStop("l_up");
            trace(("team selezionato : " + this.currentTeamStr));
            trace(("team selezionato zone di appartenenza  : " + this.oXml[0].ranking.rank.(@code == currentTeamStr).@zone));
            zone = this.oXml[0].ranking.rank.(@code == currentTeamStr).@zone.toUpperCase();
            XmlFilterForZone = this.oXml[0].ranking.rank.(@zone == zone);
            xmlFilterForZoneXML = new XML((("<root><ranking>" + XmlFilterForZone) + "</ranking></root>"));
            temp_Ranking = this.buildRank(xmlFilterForZoneXML, this.currentTeamStr);
            temp_Ranking.x = 9;
            temp_Ranking.y = 56;
            addChild(temp_Ranking);
        }
        private function clock_dx_click(_arg1:MouseEvent):void{
            _arg1.target.useHandCursor = false;
            _arg1.target.gotoAndStop("l_over");
            this.mcClock_sx.useHandCursor = true;
            this.mcClock_sx.gotoAndStop("l_up");
            var _local2:Ranking = this.buildRank(this.oXml[0], this.currentTeamStr);
            _local2.x = 9;
            _local2.y = 56;
            addChild(_local2);
        }
        private function clock_sx_over(_arg1:MouseEvent):void{
            var event:* = _arg1;
            this.ttSx = new ToolTip_Win();
            this.ttSx.name = "tt_sx";
            this.ttSx.hook = true;
            this.ttSx.cornerRadius = 4;
            this.ttSx.autoSize = true;
            this.ttSx.align = "left";
            this.ttSx.show(this, this.oXmlVoc.word.(@tcode == "usertime"), null);
        }
        private function clock_dx_over(_arg1:MouseEvent):void{
            var event:* = _arg1;
            this.ttDx = new ToolTip_Win();
            this.ttDx.name = "tt_dx";
            this.ttDx.hook = true;
            this.ttDx.cornerRadius = 4;
            this.ttDx.autoSize = true;
            this.ttDx.align = "left";
            this.ttDx.show(this, this.oXmlVoc.word.(@tcode == "localtime"), null);
        }

    }
}//package 
﻿package Utility {

    public class LangFifaCom {

        private static var _language:String = "";
        private static var _environment:String = "";
        private static var _langCode:String = "";
        private static var baseURLFeed:String = "http://www.fifa.com";
        private static var baseURL:String = "http://www.fifa.com";
        private static var baseURLVoc:String = "http://www.fifa.com";

        public static function set environment(_arg1:String):void{
            _environment = _arg1;
        }
        public static function get environment():String{
            return (_environment);
        }
        public static function set language(_arg1:String):void{
            _language = _arg1;
        }
        public static function get language():String{
            return (_language);
        }
        public static function get langcode():String{
            return (_langCode);
        }
        public static function getSite():Array{
            var _local1:String;
            var _local2:String;
            var _local3:String;
            if ((((_language == null)) || ((_language == "")))){
                _language = "EN";
            };
            if ((((_environment == null)) || ((_environment == "")))){
                _environment = "prod";
            };
            trace(_language.toLowerCase());
            switch (_language.toLowerCase()){
                case "en":
                    _langCode = "en";
                    _local1 = "en";
                    _local3 = "en";
                    _local2 = "8501";
                    break;
                case "fr":
                    _langCode = "fr";
                    _local1 = "fr";
                    _local3 = "fr";
                    _local2 = "";
                    break;
                case "de":
                    _langCode = "de";
                    _local1 = "de";
                    _local3 = "de";
                    _local2 = "";
                    break;
                case "es":
                    _langCode = "es";
                    _local1 = "es";
                    _local3 = "es";
                    _local2 = "";
                    break;
                case "pt":
                    _langCode = "pt";
                    _local1 = "pt";
                    _local3 = "pt";
                    _local2 = "";
                    break;
                case "ar":
                    _langCode = "ar";
                    _local1 = "ar";
                    _local3 = "ar";
                    _local2 = "";
                    break;
            };
            switch (_environment.toLowerCase()){
                case "prod":
                    if (_language.toLowerCase() == "en"){
                        baseURLFeed = "http://www.fifa.com";
                        baseURL = "http://www.fifa.com";
                        baseURLVoc = "http://www.fifa.com";
                    } else {
                        baseURLFeed = (("http://" + _local1) + ".fifa.com");
                        baseURL = (("http://" + _local1) + ".fifa.com");
                        baseURLVoc = (("http://" + _local1) + ".fifa.com");
                    };
                    break;
                case "stag":
                    if (_language.toLowerCase() == "en"){
                        baseURLFeed = "http://static.en.stg.fifa.com";
                        baseURL = "";
                        baseURLVoc = "http://static.en.stg.fifa.com";
                    } else {
                        baseURLFeed = (("http://static." + _local3) + ".stg.fifa.com");
                        baseURL = "";
                        baseURLVoc = (("http://static." + _local3) + ".stg.fifa.com");
                    };
                    break;
                case "dev":
                    if (_language.toLowerCase() == "en"){
                        baseURLFeed = "http://si-sql-04:8501";
                        baseURL = "";
                        baseURLVoc = "";
                    } else {
                        baseURLFeed = ("http://si-sql-04:" + _local2);
                        baseURL = "";
                        baseURLVoc = "";
                    };
                    break;
            };
            return ([baseURLFeed, baseURLVoc, baseURL]);
        }

    }
}//package Utility 
﻿package Utility {
    import flash.net.*;

    public class TrackingWidgets {

        public function TrackingWidgets():void{
        }
        public static function track(_arg1:String, _arg2:Object, _arg3:String=""):void{
            var _local4:String = (((_arg1.toString() + "?cid=widgets&att=worldranking_") + LangFifaCom.langcode) + _arg3);
            trace(("link \t track  " + _local4));
            trace("No Tracking mode .. ");
            var _local5:URLRequest = new URLRequest(_local4);
            navigateToURL(_local5, "_blank");
        }

    }
}//package Utility 
﻿package visup.widget.utils {
    import flash.display.*;
    import flash.net.*;

    public class ButtonUtils {

        public static function makeButton(_arg1:Sprite):void{
            _arg1.useHandCursor = true;
            _arg1.buttonMode = true;
        }
        public static function drawButton(_arg1:Sprite, _arg2:int, _arg3:int, _arg4:Number=0):void{
            var _local5:Graphics = _arg1.graphics;
            _local5.beginFill(0, _arg4);
            _local5.drawRect(0, 0, _arg2, _arg3);
            _local5.endFill();
        }
        public static function openURL(_arg1:String, _arg2:String="_self"):void{
            var _local3:URLRequest = new URLRequest(_arg1);
            navigateToURL(_local3, _arg2);
        }

    }
}//package visup.widget.utils 
﻿package visup.widget.utils {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.media.*;

    public class TweenLite {

        public static var version:Number = 6.22;
        public static var killDelayedCallsTo:Function = killTweensOf;
        public static var defaultEase:Function = TweenLite.easeOut;
        protected static var _all:Dictionary = new Dictionary();
        protected static var _curTime:uint;
        private static var _classInitted:Boolean;
        private static var _sprite:Sprite = new Sprite();
        private static var _listening:Boolean;
        private static var _timer:Timer = new Timer(2000);

        public var duration:Number;
        public var vars:Object;
        public var delay:Number;
        public var startTime:int;
        public var initTime:int;
        public var tweens:Array;
        public var target:Object;
        protected var _active:Boolean;
        protected var _subTweens:Array;
        protected var _hst:Boolean;
        protected var _initted:Boolean;

        public function TweenLite(_arg1:Object, _arg2:Number, _arg3:Object){
            if (_arg1 == null){
                return;
            };
            if (((((!((_arg3.overwrite == false))) && (!((_arg1 == null))))) || ((_all[_arg1] == undefined)))){
                delete _all[_arg1];
                _all[_arg1] = new Dictionary();
            };
            _all[_arg1][this] = this;
            this.vars = _arg3;
            this.duration = ((_arg2) || (0.001));
            this.delay = ((_arg3.delay) || (0));
            this.target = _arg1;
            if (!(this.vars.ease is Function)){
                this.vars.ease = defaultEase;
            };
            if (this.vars.easeParams != null){
                this.vars.proxiedEase = this.vars.ease;
                this.vars.ease = this.easeProxy;
            };
            if (!isNaN(Number(this.vars.autoAlpha))){
                this.vars.alpha = Number(this.vars.autoAlpha);
            };
            this.tweens = [];
            this._subTweens = [];
            this._hst = (this._initted = false);
            this._active = (((_arg2 == 0)) && ((this.delay == 0)));
            if (!_classInitted){
                _curTime = getTimer();
                _sprite.addEventListener(Event.ENTER_FRAME, executeAll);
                _classInitted = true;
            };
            this.initTime = _curTime;
            if ((((((this.vars.runBackwards == true)) && (!((this.vars.renderOnStart == true))))) || (this._active))){
                this.initTweenVals();
                this.startTime = _curTime;
                if (this._active){
                    this.render((this.startTime + 1));
                } else {
                    this.render(this.startTime);
                };
            };
            if (((!(_listening)) && (!(this._active)))){
                _timer.addEventListener("timer", killGarbage);
                _timer.start();
                _listening = true;
            };
        }
        public static function to(_arg1:Object, _arg2:Number, _arg3:Object):TweenLite{
            return (new TweenLite(_arg1, _arg2, _arg3));
        }
        public static function from(_arg1:Object, _arg2:Number, _arg3:Object):TweenLite{
            _arg3.runBackwards = true;
            return (new TweenLite(_arg1, _arg2, _arg3));
        }
        public static function delayedCall(_arg1:Number, _arg2:Function, _arg3:Array=null, _arg4=null):TweenLite{
            return (new TweenLite(_arg2, 0, {
                delay:_arg1,
                onComplete:_arg2,
                onCompleteParams:_arg3,
                onCompleteScope:_arg4,
                overwrite:false
            }));
        }
        public static function executeAll(_arg1:Event=null):void{
            var _local3:Dictionary;
            var _local4:Object;
            var _local5:Object;
            var _local2:uint = (_curTime = getTimer());
            if (_listening){
                _local3 = _all;
                for each (_local4 in _local3) {
                    for (_local5 in _local4) {
                        if (((!((_local4[_local5] == undefined))) && (_local4[_local5].active))){
                            _local4[_local5].render(_local2);
                        };
                    };
                };
            };
        }
        public static function removeTween(_arg1:TweenLite=null):void{
            if (((!((_arg1 == null))) && (!((_all[_arg1.target] == undefined))))){
                delete _all[_arg1.target][_arg1];
            };
        }
        public static function killTweensOf(_arg1:Object=null, _arg2:Boolean=false):void{
            var _local3:Object;
            var _local4:*;
            if (((!((_arg1 == null))) && (!((_all[_arg1] == undefined))))){
                if (_arg2){
                    _local3 = _all[_arg1];
                    for (_local4 in _local3) {
                        _local3[_local4].complete(false);
                    };
                };
                delete _all[_arg1];
            };
        }
        public static function killGarbage(_arg1:TimerEvent):void{
            var _local3:Boolean;
            var _local4:Object;
            var _local5:Object;
            var _local6:Object;
            var _local2:uint;
            for (_local4 in _all) {
                _local3 = false;
                for (_local5 in _all[_local4]) {
                    _local3 = true;
                    break;
                };
                if (!_local3){
                    delete _all[_local4];
                } else {
                    _local2++;
                };
            };
            if (_local2 == 0){
                _timer.removeEventListener("timer", killGarbage);
                _timer.stop();
                _listening = false;
            };
        }
        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / _arg4);
            return ((((-(_arg3) * _arg1) * (_arg1 - 2)) + _arg2));
        }
        public static function tintProxy(_arg1:Object):void{
            var _local2:Number = _arg1.target.progress;
            var _local3:Number = (1 - _local2);
            var _local4:Object = _arg1.info.color;
            var _local5:Object = _arg1.info.endColor;
            _arg1.info.target.transform.colorTransform = new ColorTransform(((_local4.redMultiplier * _local3) + (_local5.redMultiplier * _local2)), ((_local4.greenMultiplier * _local3) + (_local5.greenMultiplier * _local2)), ((_local4.blueMultiplier * _local3) + (_local5.blueMultiplier * _local2)), ((_local4.alphaMultiplier * _local3) + (_local5.alphaMultiplier * _local2)), ((_local4.redOffset * _local3) + (_local5.redOffset * _local2)), ((_local4.greenOffset * _local3) + (_local5.greenOffset * _local2)), ((_local4.blueOffset * _local3) + (_local5.blueOffset * _local2)), ((_local4.alphaOffset * _local3) + (_local5.alphaOffset * _local2)));
        }
        public static function frameProxy(_arg1:Object):void{
            _arg1.info.target.gotoAndStop(Math.round(_arg1.target.frame));
        }
        public static function volumeProxy(_arg1:Object):void{
            _arg1.info.target.soundTransform = _arg1.target;
        }

        public function initTweenVals(_arg1:Boolean=false, _arg2:String=""):void{
            var _local4:String;
            var _local5:int;
            var _local6:Array;
            var _local7:ColorTransform;
            var _local8:ColorTransform;
            var _local9:Object;
            var _local3 = (this.target is DisplayObject);
            if ((this.target is Array)){
                _local6 = ((this.vars.endArray) || ([]));
                _local5 = 0;
                while (_local5 < _local6.length) {
                    if (((!((this.target[_local5] == _local6[_local5]))) && (!((this.target[_local5] == undefined))))){
                        this.tweens.push({
                            o:this.target,
                            p:_local5.toString(),
                            s:this.target[_local5],
                            c:(_local6[_local5] - this.target[_local5])
                        });
                    };
                    _local5++;
                };
            } else {
                for (_local4 in this.vars) {
                    if ((((((((((((((((((((((((((((((((((((_local4 == "ease")) || ((_local4 == "delay")))) || ((_local4 == "overwrite")))) || ((_local4 == "onComplete")))) || ((_local4 == "onCompleteParams")))) || ((_local4 == "onCompleteScope")))) || ((_local4 == "runBackwards")))) || ((_local4 == "onUpdate")))) || ((_local4 == "onUpdateParams")))) || ((_local4 == "onUpdateScope")))) || ((_local4 == "autoAlpha")))) || ((_local4 == "onStart")))) || ((_local4 == "onStartParams")))) || ((_local4 == "onStartScope")))) || ((_local4 == "renderOnStart")))) || ((_local4 == "proxiedEase")))) || ((_local4 == "easeParams")))) || (((_arg1) && (!((_arg2.indexOf(((" " + _local4) + " ")) == -1))))))){
                    } else {
                        if ((((_local4 == "tint")) && (_local3))){
                            _local7 = this.target.transform.colorTransform;
                            _local8 = new ColorTransform();
                            if (this.vars.alpha != undefined){
                                _local8.alphaMultiplier = this.vars.alpha;
                                delete this.vars.alpha;
                                _local5 = (this.tweens.length - 1);
                                while (_local5 > -1) {
                                    if (this.tweens[_local5].p == "alpha"){
                                        this.tweens.splice(_local5, 1);
                                        break;
                                    };
                                    _local5--;
                                };
                            } else {
                                _local8.alphaMultiplier = this.target.alpha;
                            };
                            if (((((!((this.vars[_local4] == null))) && (!((this.vars[_local4] == ""))))) || ((this.vars[_local4] == 0)))){
                                _local8.color = this.vars[_local4];
                            };
                            this.addSubTween(tintProxy, {progress:0}, {progress:1}, {
                                target:this.target,
                                color:_local7,
                                endColor:_local8
                            });
                        } else {
                            if ((((_local4 == "frame")) && (_local3))){
                                this.addSubTween(frameProxy, {frame:this.target.currentFrame}, {frame:this.vars[_local4]}, {target:this.target});
                            } else {
                                if ((((_local4 == "volume")) && (((_local3) || ((this.target is SoundChannel)))))){
                                    this.addSubTween(volumeProxy, this.target.soundTransform, {volume:this.vars[_local4]}, {target:this.target});
                                } else {
                                    if (typeof(this.vars[_local4]) == "number"){
                                        this.tweens.push({
                                            o:this.target,
                                            p:_local4,
                                            s:this.target[_local4],
                                            c:(this.vars[_local4] - this.target[_local4])
                                        });
                                    } else {
                                        this.tweens.push({
                                            o:this.target,
                                            p:_local4,
                                            s:this.target[_local4],
                                            c:Number(this.vars[_local4])
                                        });
                                    };
                                };
                            };
                        };
                    };
                };
            };
            if (this.vars.runBackwards == true){
                _local5 = (this.tweens.length - 1);
                while (_local5 > -1) {
                    _local9 = this.tweens[_local5];
                    this.tweens[_local5].s = (_local9.s + _local9.c);
                    _local9.c = (_local9.c * -1);
                    _local5--;
                };
            };
            if (typeof(this.vars.autoAlpha) == "number"){
                this.target.visible = !((((this.vars.runBackwards == true)) && ((this.target.alpha == 0))));
            };
            this._initted = true;
        }
        protected function addSubTween(_arg1:Function, _arg2:Object, _arg3:Object, _arg4:Object=null):void{
            var _local6:String;
            var _local5:Object = {
                proxy:_arg1,
                target:_arg2,
                info:_arg4
            };
            this._subTweens.push(_local5);
            for (_local6 in _arg3) {
                if (_arg2.hasOwnProperty(_local6)){
                    if (typeof(_arg3[_local6]) == "number"){
                        this.tweens.push({
                            o:_arg2,
                            p:_local6,
                            s:_arg2[_local6],
                            c:(_arg3[_local6] - _arg2[_local6]),
                            sub:_local5
                        });
                    } else {
                        this.tweens.push({
                            o:_arg2,
                            p:_local6,
                            s:_arg2[_local6],
                            c:Number(_arg3[_local6]),
                            sub:_local5
                        });
                    };
                };
            };
            this._hst = true;
        }
        public function render(_arg1:uint):void{
            var _local4:Object;
            var _local5:int;
            var _local2:Number = ((_arg1 - this.startTime) / 1000);
            if (_local2 > this.duration){
                _local2 = this.duration;
            };
            var _local3:Number = this.vars.ease(_local2, 0, 1, this.duration);
            _local5 = (this.tweens.length - 1);
            while (_local5 > -1) {
                _local4 = this.tweens[_local5];
                _local4.o[_local4.p] = (_local4.s + (_local3 * _local4.c));
                _local5--;
            };
            if (this._hst){
                _local5 = (this._subTweens.length - 1);
                while (_local5 > -1) {
                    this._subTweens[_local5].proxy(this._subTweens[_local5]);
                    _local5--;
                };
            };
            if (this.vars.onUpdate != null){
                this.vars.onUpdate.apply(this.vars.onUpdateScope, this.vars.onUpdateParams);
            };
            if (_local2 == this.duration){
                this.complete(true);
            };
        }
        public function complete(_arg1:Boolean=false):void{
            if (!_arg1){
                if (!this._initted){
                    this.initTweenVals();
                };
                this.startTime = (_curTime - (this.duration * 1000));
                this.render(_curTime);
                return;
            };
            if ((((typeof(this.vars.autoAlpha) == "number")) && ((this.target.alpha == 0)))){
                this.target.visible = false;
            };
            if (this.vars.onComplete != null){
                this.vars.onComplete.apply(this.vars.onCompleteScope, this.vars.onCompleteParams);
            };
            removeTween(this);
        }
        protected function easeProxy(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return (this.vars.proxiedEase.apply(null, arguments.concat(this.vars.easeParams)));
        }
        public function get active():Boolean{
            if (this._active){
                return (true);
            };
            if (((_curTime - this.initTime) / 1000) > this.delay){
                this._active = true;
                this.startTime = (this.initTime + (this.delay * 1000));
                if (!this._initted){
                    this.initTweenVals();
                } else {
                    if (typeof(this.vars.autoAlpha) == "number"){
                        this.target.visible = true;
                    };
                };
                if (this.vars.onStart != null){
                    this.vars.onStart.apply(this.vars.onStartScope, this.vars.onStartParams);
                };
                if (this.duration == 0.001){
                    this.startTime = (this.startTime - 1);
                };
                return (true);
            };
            return (false);
        }

    }
}//package visup.widget.utils 
﻿package {
    import flash.display.*;

    public dynamic class TeamItem extends MovieClip {

        public var TeamItemMC:MovieClip;
        public var bgMc:MovieClip;

        public function TeamItem(){
            addFrameScript(0, this.frame1, 9, this.frame10);
        }
        function frame1(){
            stop();
        }
        function frame10(){
            stop();
        }

    }
}//package 
﻿package {

    public class Global {

        public static var en:Object = new Object();
        public static var fr:Object = new Object();
        public static var de:Object = new Object();
        public static var es:Object = new Object();
        public static var pt:Object = new Object();
        public static var ar:Object = new Object();

        en.label = new XML();
        fr.label = new XML();
        de.label = new XML();
        es.label = new XML();
        pt.label = new XML();
        ar.label = new XML();
        en.label = <voc language="English" alphabet="E">
		<word tcode="title" abbr=""> FIFA World Cup Qualifiers</word>
		<word tcode="titleWR" abbr="">FIFA/COCA-COLA WORLD RANKING</word>
		<word tcode="titleFR" abbr="">Full Ranking Table</word>		
		<word tcode="matches" abbr="">Matches</word>
		<word tcode="news" abbr="">News</word>
		<word tcode="morenews" abbr="">More News</word>
		<word tcode="standings" abbr="">Full Standings</word>
		<word tcode="rank" abbr="Rnk">Ranking</word>
		<word tcode="team" abbr="Team">Team</word>
		<word tcode="played" abbr="MP">Matches played</word>
		<word tcode="points" abbr="Pts">Points</word>
		<word tcode="status" abbr="">Status</word>
		<word tcode="add" abbr="">Add Widget</word>
		<word tcode="usertime" abbr="">Zone</word>
		<word tcode="localtime" abbr="">World</word>
		<word tcode="live" abbr=""> LIVE</word>
		<word tcode="update" abbr=""> Updated:</word>
		
				<word tcode="copy" abbr="">Copy</word>
<word tcode="embed" abbr="">Embed the code</word>
<word tcode="copyclipboard" abbr="">Copied to clipboard</word>
		
		
		</voc>
        ;
        fr.label = <voc language="Français" alphabet="F">
		<word tcode="title" abbr=""> Qualifications Coupe du Monde</word>
		<word tcode="titleWR" abbr="">CLASSEMENT MONDIAL FIFA/COCA-COLA</word>	
		<word tcode="titleFR" abbr="">Class. complet</word>		
		<word tcode="matches" abbr="">Matches</word>
		<word tcode="news" abbr="">Infos</word>
		<word tcode="morenews" abbr=""> Plus D'Infos</word>	
		<word tcode="standings" abbr="">Classement complet</word>
		<word tcode="rank" abbr="Clsst">Classement</word>
		<word tcode="team" abbr="Equ.">Equipe</word>
		<word tcode="played" abbr="MJ">Joués</word>
		<word tcode="points" abbr="Pts">Points</word>
		<word tcode="status" abbr="">Position</word>
		<word tcode="add" abbr="">Ajouter le Widget</word>
		<word tcode="usertime" abbr="">Zone</word>
		<word tcode="localtime" abbr="">Monde</word>
		<word tcode="live" abbr=""> EN DIRECT</word>
		<word tcode="update" abbr="">Mise à jour:</word>
		
		
				<word tcode="copy" abbr="">Copier</word>
<word tcode="embed" abbr="">Insérer le code</word>
<word tcode="copyclipboard" abbr="">Copié dans le presse-papiers</word>
		
		</voc>
        ;
        de.label = <voc language="Deutsch" alphabet="D">
		<word tcode="title" abbr=""> FIFA WM - Qualifikationsspiele</word>
		<word tcode="titleWR" abbr=""> FIFA/COCA-COLA-WELTRANGLISTE</word>	
		<word tcode="titleFR" abbr="">Komplette Rangliste</word>		
		<word tcode="matches" abbr="">Spiele</word>
		<word tcode="news" abbr="">Nachrichten</word>
		<word tcode="morenews" abbr="">Mehr Nachrichten</word>
		<word tcode="standings" abbr="">Vollständige Platzierung</word>
		<word tcode="rank" abbr="Rang">Rang</word>
		<word tcode="team" abbr="Team">Team</word>
		<word tcode="played" abbr="Sp">Gespielt</word>
		<word tcode="points" abbr="P">Punkte</word>
		<word tcode="status" abbr="">Status</word>
		<word tcode="add" abbr="">Widget Hinzufügen</word>
		<word tcode="usertime" abbr="">Zone</word>
		<word tcode="localtime" abbr="">Welt</word>
		<word tcode="live" abbr=""> LIVE</word>
		<word tcode="update" abbr="">Letztes Update:</word>
		
		
			<word tcode="copy" abbr="">Kopieren</word>
<word tcode="embed" abbr="">Code einbetten</word>
<word tcode="copyclipboard" abbr="">In die Zwischenablage kopiert</word>
		
		</voc>
        ;
        es.label = <voc language="Español" alphabet="S">
		<word tcode="title" abbr=""> Eliminatorias para la Copa Mundial</word>
		<word tcode="titleWR" abbr="">CLASIFICACIÓN MUNDIAL FIFA/COCA-COLA</word>
		<word tcode="titleFR" abbr="">Tabla completa</word>		
		<word tcode="matches" abbr="">Partidos</word>
		<word tcode="news" abbr="">Noticias</word>
		<word tcode="morenews" abbr="">Más Noticias</word>
		<word tcode="standings" abbr="">Tabla completa</word>
		<word tcode="rank" abbr="Pos.">Posición</word>
		<word tcode="team" abbr="Equipo">Equipo</word>
		<word tcode="played" abbr="Pj">Partidos jugados</word>
		<word tcode="points" abbr="Pts.">Puntos</word>
		<word tcode="status" abbr="">Situación</word>
		<word tcode="add" abbr="">Añadir Widget</word>
		<word tcode="usertime" abbr="">Zona</word>
		<word tcode="localtime" abbr="">Mundo</word>
		<word tcode="live" abbr=""> EN VIVO</word>
		<word tcode="update" abbr="">Última act.:</word>
		
		<word tcode="copy" abbr="">Copiar</word>
<word tcode="embed" abbr="">Insertar el código</word>
<word tcode="copyclipboard" abbr="">Copiado en el portapapeles</word>
		
		
		</voc>
        ;
        pt.label = <voc language="Portuguese" alphabet="P">
		<word tcode="title" abbr="">Eliminatórias para a Copa do Mundo da FIFA</word>
		<word tcode="titleWR" abbr="">Ranking Mundial FIFA/Coca-Cola</word>
		<word tcode="titleFR" abbr="">Ranking completo</word>		
		<word tcode="matches" abbr="">Jogos</word>
		<word tcode="news" abbr="">Notícias</word>
		<word tcode="morenews" abbr="">Mais Notícias</word>
		<word tcode="standings" abbr="">Classificação completa</word>
		<word tcode="rank" abbr="">Ranking</word>
		<word tcode="team" abbr="">Equipe</word>
		<word tcode="played" abbr="J">Partidas jogadas</word>
		<word tcode="points" abbr="Pts">Pontos</word>
		<word tcode="status" abbr="">Status</word>
		<word tcode="add" abbr="">Adicionar Widget</word>
		<word tcode="usertime" abbr="">Zona</word>
		<word tcode="localtime" abbr="">Mundo</word>
		<word tcode="live" abbr="">Ao vivo</word>
		<word tcode="update" abbr="">Atualizado em:</word>
		
		<word tcode="copy" abbr="">Copiar</word>
<word tcode="embed" abbr="">Código embed</word>
<word tcode="copyclipboard" abbr="">Copiado para a clipboard</word>

		
		
		</voc>
        ;
        ar.label = <voc language="Arabic" alphabet="A">
		<word tcode="title" abbr=""> إستعادة </word>
		<word tcode="titleWR" abbr="">مباريامباريامباريات</word>	
		<word tcode="matches" abbr="">مباريات</word>
		<word tcode="news" abbr="">أخبار</word>
		<word tcode="morenews" abbr="">المزيد من الأخبار</word>
		<word tcode="standings" abbr="">الترتيب الكامل</word>
		<word tcode="rank" abbr="Pos.">إستعادة </word>
		<word tcode="team" abbr="Equipo">إستعادة </word>
		<word tcode="played" abbr="Pj">إستعادة </word>
		<word tcode="points" abbr="Pts.">إستعادة </word>
		<word tcode="status" abbr="">حالة</word>
		<word tcode="add" abbr="">إستعادة </word>
		<word tcode="usertime" abbr="">إستعادة </word>
		<word tcode="localtime" abbr="">إستعادة </word>
		<word tcode="live" abbr=""> لايف</word>
		<word tcode="update" abbr="">حالة:</word>
		</voc>
        ;
    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Clock_dx extends MovieClip {

        public function Clock_dx(){
            addFrameScript(0, this.frame1, 9, this.frame10);
        }
        function frame1(){
            stop();
        }
        function frame10(){
            stop();
        }

    }
}//package 
﻿package main_fla {
    import flash.display.*;

    public dynamic class teamArrowContainer_36 extends MovieClip {

        public function teamArrowContainer_36(){
            addFrameScript(0, this.frame1, 1, this.frame2, 2, this.frame3);
        }
        function frame1(){
            stop();
        }
        function frame2(){
            stop();
        }
        function frame3(){
            stop();
        }

    }
}//package main_fla 
﻿package main_fla {
    import flash.display.*;

    public dynamic class titleTeam_22 extends MovieClip {

        public function titleTeam_22(){
            addFrameScript(0, this.frame1, 1, this.frame2, 2, this.frame3, 3, this.frame4, 4, this.frame5);
        }
        function frame1(){
            stop();
        }
        function frame2(){
            stop();
        }
        function frame3(){
            stop();
        }
        function frame4(){
            stop();
        }
        function frame5(){
            stop();
        }

    }
}//package main_fla 
﻿package fl.transitions.easing {

    public class Strong {

        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / _arg4);
            return (((((((_arg3 * _arg1) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
        }
        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 1)) + _arg2));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((((((_arg3 / 2) * _arg1) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((_arg3 / 2) * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 2)) + _arg2));
        }

    }
}//package fl.transitions.easing 
﻿package fl.transitions {
    import flash.events.*;

    public class TweenEvent extends Event {

        public static const MOTION_START:String = "motionStart";
        public static const MOTION_STOP:String = "motionStop";
        public static const MOTION_FINISH:String = "motionFinish";
        public static const MOTION_CHANGE:String = "motionChange";
        public static const MOTION_RESUME:String = "motionResume";
        public static const MOTION_LOOP:String = "motionLoop";

        public var time:Number = NaN;
        public var position:Number = NaN;

        public function TweenEvent(_arg1:String, _arg2:Number, _arg3:Number, _arg4:Boolean=false, _arg5:Boolean=false){
            super(_arg1, _arg4, _arg5);
            this.time = _arg2;
            this.position = _arg3;
        }
        override public function clone():Event{
            return (new TweenEvent(this.type, this.time, this.position, this.bubbles, this.cancelable));
        }

    }
}//package fl.transitions 
﻿package fl.transitions {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;

    public class Tween extends EventDispatcher {

        protected static var _mc:MovieClip = new MovieClip();

        public var isPlaying:Boolean = false;
        public var obj:Object = null;
        public var prop:String = "";
        public var func:Function;
        public var begin:Number = NaN;
        public var change:Number = NaN;
        public var useSeconds:Boolean = false;
        public var prevTime:Number = NaN;
        public var prevPos:Number = NaN;
        public var looping:Boolean = false;
        private var _duration:Number = NaN;
        private var _time:Number = NaN;
        private var _fps:Number = NaN;
        private var _position:Number = NaN;
        private var _startTime:Number = NaN;
        private var _intervalID:uint = 0;
        private var _finish:Number = NaN;
        private var _timer:Timer = null;

        public function Tween(_arg1:Object, _arg2:String, _arg3:Function, _arg4:Number, _arg5:Number, _arg6:Number, _arg7:Boolean=false){
            this.func = function (_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
                return ((((_arg3 * _arg1) / _arg4) + _arg2));
            };
            super();
            if (!arguments.length){
                return;
            };
            this.obj = _arg1;
            this.prop = _arg2;
            this.begin = _arg4;
            this.position = _arg4;
            this.duration = _arg6;
            this.useSeconds = _arg7;
            if ((_arg3 is Function)){
                this.func = _arg3;
            };
            this.finish = _arg5;
            this._timer = new Timer(100);
            this.start();
        }
        public function get time():Number{
            return (this._time);
        }
        public function set time(_arg1:Number):void{
            this.prevTime = this._time;
            if (_arg1 > this.duration){
                if (this.looping){
                    this.rewind((_arg1 - this._duration));
                    this.update();
                    this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_LOOP, this._time, this._position));
                } else {
                    if (this.useSeconds){
                        this._time = this._duration;
                        this.update();
                    };
                    this.stop();
                    this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_FINISH, this._time, this._position));
                };
            } else {
                if (_arg1 < 0){
                    this.rewind();
                    this.update();
                } else {
                    this._time = _arg1;
                    this.update();
                };
            };
        }
        public function get duration():Number{
            return (this._duration);
        }
        public function set duration(_arg1:Number):void{
            this._duration = ((_arg1)<=0) ? Infinity : _arg1;
        }
        public function get FPS():Number{
            return (this._fps);
        }
        public function set FPS(_arg1:Number):void{
            var _local2:Boolean = this.isPlaying;
            this.stopEnterFrame();
            this._fps = _arg1;
            if (_local2){
                this.startEnterFrame();
            };
        }
        public function get position():Number{
            return (this.getPosition(this._time));
        }
        public function set position(_arg1:Number):void{
            this.setPosition(_arg1);
        }
        public function getPosition(_arg1:Number=NaN):Number{
            if (isNaN(_arg1)){
                _arg1 = this._time;
            };
            return (this.func(_arg1, this.begin, this.change, this._duration));
        }
        public function setPosition(_arg1:Number):void{
            this.prevPos = this._position;
            if (this.prop.length){
                this.obj[this.prop] = (this._position = _arg1);
            };
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_CHANGE, this._time, this._position));
        }
        public function get finish():Number{
            return ((this.begin + this.change));
        }
        public function set finish(_arg1:Number):void{
            this.change = (_arg1 - this.begin);
        }
        public function continueTo(_arg1:Number, _arg2:Number):void{
            this.begin = this.position;
            this.finish = _arg1;
            if (!isNaN(_arg2)){
                this.duration = _arg2;
            };
            this.start();
        }
        public function yoyo():void{
            this.continueTo(this.begin, this.time);
        }
        protected function startEnterFrame():void{
            var _local1:Number;
            if (isNaN(this._fps)){
                _mc.addEventListener(Event.ENTER_FRAME, this.onEnterFrame, false, 0, true);
            } else {
                _local1 = (1000 / this._fps);
                this._timer.delay = _local1;
                this._timer.addEventListener(TimerEvent.TIMER, this.timerHandler, false, 0, true);
                this._timer.start();
            };
            this.isPlaying = true;
        }
        protected function stopEnterFrame():void{
            if (isNaN(this._fps)){
                _mc.removeEventListener(Event.ENTER_FRAME, this.onEnterFrame);
            } else {
                this._timer.stop();
            };
            this.isPlaying = false;
        }
        public function start():void{
            this.rewind();
            this.startEnterFrame();
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_START, this._time, this._position));
        }
        public function stop():void{
            this.stopEnterFrame();
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_STOP, this._time, this._position));
        }
        public function resume():void{
            this.fixTime();
            this.startEnterFrame();
            this.dispatchEvent(new TweenEvent(TweenEvent.MOTION_RESUME, this._time, this._position));
        }
        public function rewind(_arg1:Number=0):void{
            this._time = _arg1;
            this.fixTime();
            this.update();
        }
        public function fforward():void{
            this.time = this._duration;
            this.fixTime();
        }
        public function nextFrame():void{
            if (this.useSeconds){
                this.time = ((getTimer() - this._startTime) / 1000);
            } else {
                this.time = (this._time + 1);
            };
        }
        protected function onEnterFrame(_arg1:Event):void{
            this.nextFrame();
        }
        protected function timerHandler(_arg1:TimerEvent):void{
            this.nextFrame();
            _arg1.updateAfterEvent();
        }
        public function prevFrame():void{
            if (!this.useSeconds){
                this.time = (this._time - 1);
            };
        }
        private function fixTime():void{
            if (this.useSeconds){
                this._startTime = (getTimer() - (this._time * 1000));
            };
        }
        private function update():void{
            this.setPosition(this.getPosition(this._time));
        }

    }
}//package fl.transitions 
﻿package {
    import flash.events.*;
    import caurina.transitions.*;
    import flash.text.*;
    import flash.display.*;
    import com.panico.utils.clips.*;
    import com.panico.utils.events.*;
    import com.masteca.utils.utilities.*;
    import Utility.*;
    import com.panico.utils.*;

    public class News_New extends Sprite {

        public var thumb:MovieClip;
        public var txt_title:MovieClip;
        public var txt_section:MovieClip;
        private var cl:ContentLoader = null;
        private var _title:String = "";
        private var _date:String = "";
        private var _comment:String = "";
        private var _link:String = "";
        private var _photoURL:String = "";
        private var _section:String = "";

        public function News_New():void{
        }
        public function init(_arg1:XML){
            this._title = _arg1.newsTitle.toString();
            this._date = _arg1.newsDate.toString();
            this._comment = _arg1.newsComment.toString();
            this._link = _arg1.newsLink.toString();
            this._photoURL = _arg1.Photo.URL6.toString();
            this._section = _arg1.newsSection.toString();
            this.txt_title.title.text = this._title.toString();
            TextOverflow.check(this.txt_title.title);
            this.txt_title.title.autoSize = TextFieldAutoSize.LEFT;
            this.txt_title.buttonMode = true;
            this.txt_title.mouseChildren = false;
            this.txt_title.addEventListener(MouseEvent.CLICK, this.updateUrl);
            this.txt_section.title.text = this._section.toString();
            TextOverflow.check(this.txt_section.title);
            this.txt_section.title.autoSize = TextFieldAutoSize.LEFT;
            this.txt_section.buttonMode = true;
            this.txt_section.mouseChildren = false;
            this.txt_section.addEventListener(MouseEvent.CLICK, this.updateUrl);
            this.cl = Int21h_light.loadContent(this._photoURL.toString());
            this.cl.addEventListener(ContentLoaderEvent.COMPLETE, this.imgCaricata, false, 0, true);
            this.cl.addEventListener(ContentLoaderEvent.PROGRESS, this.imgProgress, false, 0, true);
            this.cl.addEventListener(ContentLoaderEvent.IO_ERROR, this.ioError, false, 0, true);
            this.cl.start();
        }
        private function updateUrl(_arg1:MouseEvent):void{
            var url:* = null;
            var e:* = _arg1;
            url = this._link;
            var urlTrack:* = "";
            var _api:* = null;
            try {
                _api = root.loaderInfo.loader.root;
                TrackingWidgets.track(url, _api);
            } catch(e:Error) {
                trace("Error for _api variable ");
                TrackingWidgets.track(url, null);
            };
        }
        private function imgCaricata(_arg1:ContentLoaderEvent):void{
            _arg1.target.removeEventListener(ContentLoaderEvent.COMPLETE, this.imgCaricata);
            var _local2:Bitmap = (_arg1.target.getContent() as Bitmap);
            _local2.smoothing = true;
            this.thumb.img.alpha = 0;
            this.thumb.img.addChild(_local2);
            Tweener.addTween(this.thumb.img, {
                alpha:1,
                time:0.8,
                transition:"linear"
            });
            Int21h_light.makeButton(this.thumb.img);
            this.thumb.img.addEventListener(MouseEvent.CLICK, this.updateUrl);
        }
        private function ioError(_arg1:ContentLoaderEvent):void{
        }
        private function imgProgress(_arg1:ContentLoaderEvent):void{
            var _local2:Number = (_arg1.getBlackBoard().getBoard().bytesLoaded / _arg1.getBlackBoard().getBoard().bytesTotal);
        }

    }
}//package 
﻿package {
    import flash.events.*;
    import flash.display.*;
    import visup.widget.utils.*;
    import events.*;
    import Utility.*;
    import flash.utils.*;
    import com.panico.utils.*;
    import flash.geom.*;

    public class TeamsListView extends Sprite {

        public static var TEAMCLICK:String = "teamclick";

        public var boundMC:MovieClip;
        public var closeMc:MovieClip;
        public var containerMc:MovieClip;
        public var boundingBox:MovieClip;
        public var scrollMc:MovieClip;
        public var teamContainerMc:MovieClip;
        public var titleTeam:MovieClip;
        private var containerStartY:Number;
        private var scrollStartY:Number;
        private var scrollStartX:Number;
        private var containerYMaxDiff:Number;
        private var scrollMaxDiff:Number;
        private var actualScrollDiff:Number;
        private var teamArray:Array;
        private var onDrag:Boolean = false;
        private var oXmlTeams:XML;
        private var dict:Dictionary;
        private var _isOpen:Boolean = false;

        public function TeamsListView(_arg1:XML){
            var _oXmlTeams:* = _arg1;
            this.dict = new Dictionary();
            super();
            y = this.getHeight();
            visible = false;
            this.oXmlTeams = _oXmlTeams;
            this.titleTeam.gotoAndStop(LangFifaCom.language);
            this.teamContainerMc.y = this.boundMC.y;
            this.scrollMc.y = this.boundMC.y;
            this.scrollStartY = this.scrollMc.y;
            this.scrollStartX = this.scrollMc.x;
            this.containerStartY = this.teamContainerMc.y;
            ButtonUtils.makeButton(this.scrollMc);
            this.teamContainerMc.mask = this.boundMC;
            this.boundMC.visible = false;
            this.closeMc.addEventListener(MouseEvent.CLICK, this.handleClick);
            Int21h_light.makeButton(this.closeMc);
            this.scrollMc.addEventListener(MouseEvent.MOUSE_DOWN, function ():void{
                onDrag = true;
                containerYMaxDiff = (teamContainerMc.height - boundMC.height);
                scrollMc.startDrag(false, new Rectangle(scrollStartX, scrollStartY, 0, (boundMC.height - scrollMc.height)));
            });
            addEventListener(MouseEvent.MOUSE_UP, function ():void{
                onDrag = false;
                scrollMc.stopDrag();
            });
            addEventListener(MouseEvent.MOUSE_MOVE, this.scroll);
            this.createTeams();
        }
        public function scroll(_arg1:MouseEvent):void{
            if (!this.onDrag){
                return;
            };
            this.scrollMaxDiff = (this.boundMC.height - this.scrollMc.height);
            this.actualScrollDiff = Math.round((this.scrollStartY - this.scrollMc.y));
            this.teamContainerMc.y = (this.containerStartY - Math.abs(((this.containerYMaxDiff * this.actualScrollDiff) / this.scrollMaxDiff)));
        }
        public function createTeams():void{
            var _local3:XML;
            var _local4:uint;
            var _local1:uint;
            var _local2:Array = new Array();
            for each (_local3 in this.oXmlTeams.ranking.rank) {
                _local2.push({
                    team_code:_local3.@code,
                    team_name:_local3.@name
                });
            };
            _local2.sortOn("team_name");
            _local4 = 0;
            while (_local4 < _local2.length) {
                this.createTeamItem(_local2[_local4], _local4);
                _local4++;
            };
        }
        private function createTeamItem(_arg1:Object, _arg2:uint):void{
            var _local3:TeamItem = new TeamItem();
            _local3.TeamItemMC.txt.text = _arg1.team_name;
            _local3.y = (_local3.bgMc.height * _arg2);
            this.dict[_local3] = _arg1.team_code;
            _local3.addEventListener(MouseEvent.CLICK, this.setTeam);
            Int21h_light.makeButton(_local3);
            this.teamContainerMc.addChild(_local3);
        }
        private function setTeam(_arg1:MouseEvent):void{
            dispatchEvent(new TeamStrEvent(TeamStrEvent.TEAMSTR, this.dict[_arg1.target].toString()));
        }
        protected function handleClick(_arg1:MouseEvent):void{
            switch (_arg1.currentTarget){
                case this.closeMc:
                    this.close();
                    break;
            };
        }
        public function open(_arg1:Boolean=true):void{
            visible = true;
            this._isOpen = true;
            if (_arg1){
                TweenLite.to(this, 1, {y:0});
            } else {
                y = 0;
            };
        }
        public function close():void{
            this._isOpen = false;
            TweenLite.to(this, 1, {
                y:this.getHeight(),
                onComplete:this.onTweenComplete
            });
        }
        public function get isOpen():Boolean{
            return (this._isOpen);
        }
        protected function onTweenComplete():void{
        }
        protected function getHeight():Number{
            return (this.boundingBox.height);
        }

    }
}//package 
﻿package com.masteca.utils.utilities {
    import flash.utils.*;

    public class HTTPStatusMessages {

        public static const Status:Class = HTTPStatusMessages_Status;

        private static var XMLStatus:XML;

        public static function init():void{
            var _local1:ByteArray = new Status();
            var _local2:String = _local1.readUTFBytes(_local1.length);
            XMLStatus = new XML(_local2);
        }
        public static function getMessage(_arg1:int):String{
            var id:* = _arg1;
            var ret:* = (("{" + id) + "}");
            if (XMLStatus.httpStatus.(@id == id)){
                ret = XMLStatus.httpStatus.(@id == id).@message;
            };
            return (ret);
        }
        public static function getDescription(_arg1:int):String{
            var id:* = _arg1;
            var ret:* = (("{" + id) + "}");
            if (XMLStatus.httpStatus.(@id == id)){
                ret = XMLStatus.httpStatus.(@id == id).@description;
            };
            return (ret);
        }

    }
}//package com.masteca.utils.utilities 
﻿package com.masteca.utils.utilities {
    import mx.core.*;

    public class HTTPStatusMessages_Status extends ByteArrayAsset {

    }
}//package com.masteca.utils.utilities 
﻿package com.masteca.utils.utilities {
    import flash.text.*;

    public class TextOverflow {

        public static function check(_arg1:TextField, _arg2:uint=3, _arg3:Boolean=true, _arg4:uint=1):void{
            var _local8:Number;
            var _local9:int;
            var _local10:Number;
            var _local11:Number;
            var _local5:Number = 5;
            var _local6:Number = 0;
            var _local7 = "";
            if (((!((_arg1.text == ""))) && (!((_arg1.text == null))))){
                if (_arg1.multiline){
                    if (_arg4 > 1){
                        _arg1.autoSize = TextFieldAutoSize.LEFT;
                        _local8 = (_arg1.height / _arg1.numLines);
                        _arg1.autoSize = TextFieldAutoSize.NONE;
                        if (_arg1.numLines > _arg4){
                            _arg1.height = (_local8 * _arg4);
                        };
                    };
                    if (Math.round(_arg1.textHeight) > Math.round((_arg1.height - _local5))){
                        _local9 = (((_arg1.getLineIndexAtPoint((_arg1.width - _local5), (_arg1.height - _local5)) < 0)) ? 0 : _arg1.getLineIndexAtPoint((_arg1.width - _local5), (_arg1.height - _local5)));
                        _local10 = _arg1.getLineLength(_local9);
                        _local11 = _arg1.getLineOffset(_local9);
                        _local6 = ((_local11 + _local10) - _arg2);
                        _local7 = _arg1.text.charAt(_local6);
                        if (_arg3){
                            while (((!((_local7 == " "))) && ((_local6 > 0)))) {
                                _local6--;
                                _local7 = _arg1.text.charAt(_local6);
                            };
                        };
                        if (_local6 > 0){
                            _local7 = _arg1.text.charAt((_local6 - 1));
                            if ((((_local7 == ",")) || ((_local7 == ".")))){
                                _local6--;
                            };
                            _arg1.replaceText(_local6, _arg1.text.length, "...");
                        };
                        _arg1.autoSize = TextFieldAutoSize.LEFT;
                    };
                } else {
                    _arg1.wordWrap = false;
                    if (_arg1.textWidth > (_arg1.width - _local5)){
                        _local6 = (_arg1.getCharIndexAtPoint((_arg1.width - _local5), 2) - _arg2);
                        _local7 = _arg1.text.charAt(_local6);
                        if (_arg3){
                            while (((!((_local7 == " "))) && ((_local6 > 0)))) {
                                _local6--;
                                _local7 = _arg1.text.charAt(_local6);
                            };
                        };
                        if (_local6 > 0){
                            _local7 = _arg1.text.charAt((_local6 - 1));
                            if ((((_local7 == ",")) || ((_local7 == ".")))){
                                _local6--;
                            };
                            _arg1.replaceText(_local6, _arg1.text.length, "...");
                        };
                    };
                };
            };
        }

    }
}//package com.masteca.utils.utilities 
﻿package com.masteca.utils.utilities {

    public class Vocabulary {

        private var _word:String = "";
        private var oXmlVoc:XML;

        public function Vocabulary(_arg1:XML){
            this.oXmlVoc = _arg1;
        }
        public function getWord(_arg1:String, _arg2:Boolean=false):String{
            var wordtag:* = _arg1;
            var abbr:Boolean = _arg2;
            this._word = (("{" + wordtag) + "}");
            if (!abbr){
                if (((!((this.oXmlVoc.word.(@tcode.toString().toLowerCase() == wordtag.toLowerCase()) == ""))) && (!((this.oXmlVoc.word.(@tcode.toString().toLowerCase() == wordtag.toLowerCase()) == undefined))))){
                    this._word = this.oXmlVoc.word.(@tcode.toString().toLowerCase() == wordtag.toLowerCase());
                };
            } else {
                if (((!((this.oXmlVoc.word.(@tcode.toString().toLowerCase() == wordtag.toLowerCase()).@abbr == ""))) && (!((this.oXmlVoc.word.(@tcode.toString().toLowerCase() == wordtag.toLowerCase()).@abbr == undefined))))){
                    this._word = this.oXmlVoc.word.(@tcode.toString().toLowerCase() == wordtag.toLowerCase()).@abbr;
                };
            };
            return (this._word);
        }

    }
}//package com.masteca.utils.utilities 
﻿package com.panico.utils.clips {
    import flash.events.*;
    import com.panico.utils.data.*;
    import flash.net.*;
    import com.panico.utils.events.*;
    import com.masteca.utils.utilities.*;

    public class ContentUrlLoader extends EventDispatcher {

        private var urlrequest:URLRequest = null;
        private var lStarted:Boolean = false;
        private var ldr:URLLoader = null;
        private var type:String = "text";
        private var blackboard:BlackBoard;

        public function ContentUrlLoader(_arg1:URLRequest, _arg2:Boolean=true, _arg3:String="text"){
            this.blackboard = new BlackBoard();
            this.type = _arg3;
            this.urlrequest = _arg1;
            this.ldr = new URLLoader();
            this.ldr.dataFormat = _arg3;
            this.configureListeners(this.ldr);
            if (_arg2){
                trace("ContentUrlLoader: Attenzione ad eventuali listener che potrebbero non funzionare");
                this.start();
            };
        }
        public function start():void{
            if (!this.lStarted){
                this.lStarted = true;
                this.ldr.load(this.urlrequest);
            };
        }
        private function configureListeners(_arg1:IEventDispatcher):void{
            _arg1.addEventListener(Event.COMPLETE, this.completeHandler, false, 0, true);
            _arg1.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler, false, 0, true);
            _arg1.addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler, false, 0, true);
            _arg1.addEventListener(Event.OPEN, this.openHandler, false, 0, true);
            _arg1.addEventListener(ProgressEvent.PROGRESS, this.progressHandler, false, 0, true);
            _arg1.addEventListener(Event.UNLOAD, this.unLoadHandler, false, 0, true);
            _arg1.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.securityErrorHandler, false, 0, true);
        }
        private function removeListeners(_arg1:IEventDispatcher):void{
            _arg1.removeEventListener(Event.COMPLETE, this.completeHandler);
            _arg1.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler);
            _arg1.removeEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            _arg1.removeEventListener(Event.OPEN, this.openHandler);
            _arg1.removeEventListener(ProgressEvent.PROGRESS, this.progressHandler);
            _arg1.removeEventListener(Event.UNLOAD, this.unLoadHandler);
            _arg1.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, this.securityErrorHandler);
        }
        private function completeHandler(_arg1:Event):void{
            this.removeListeners(this.ldr);
            this.blackboard.set("data", this.ldr.data);
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.COMPLETE, this.ldr, this.blackboard));
        }
        private function httpStatusHandler(_arg1:HTTPStatusEvent):void{
            HTTPStatusMessages.init();
            var _local2:int = _arg1.status;
            var _local3:String = HTTPStatusMessages.getMessage(_local2);
            var _local4:String = HTTPStatusMessages.getDescription(_local2);
            this.blackboard.set("status", _local2);
            this.blackboard.set("message", _local3);
            this.blackboard.set("description", _local4);
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.HTTP_STATUS, this.ldr, this.blackboard));
        }
        private function ioErrorHandler(_arg1:IOErrorEvent):void{
            this.removeListeners(this.ldr);
            trace(("Error opening file: " + this.urlrequest));
            this.blackboard.set("text", _arg1.text);
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.IO_ERROR, this.ldr, this.blackboard));
        }
        private function openHandler(_arg1:Event):void{
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.OPEN, this.ldr, this.blackboard));
        }
        private function progressHandler(_arg1:ProgressEvent):void{
            this.blackboard.set("bytesLoaded", _arg1.bytesLoaded);
            this.blackboard.set("bytesTotal", _arg1.bytesTotal);
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.PROGRESS, this.ldr, this.blackboard));
        }
        private function unLoadHandler(_arg1:Event):void{
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.UNLOAD, this.ldr, this.blackboard));
        }
        private function securityErrorHandler(_arg1:SecurityErrorEvent):void{
            this.removeListeners(this.ldr);
            trace(("Security error opening file: " + this.urlrequest));
            this.blackboard.set("text", _arg1.text);
            dispatchEvent(new ContentUrlLoaderEvent(ContentUrlLoaderEvent.SECURITY_ERROR, this.ldr, this.blackboard));
        }

    }
}//package com.panico.utils.clips 
﻿package com.panico.utils.clips {
    import flash.events.*;
    import flash.display.*;
    import com.panico.utils.data.*;
    import flash.net.*;
    import com.panico.utils.events.*;
    import flash.system.*;

    public class ContentLoader extends Loader {

        protected var uri_load:String = null;
        private var lStarted:Boolean = false;
        protected var context:LoaderContext = null;
        private var ready:Boolean = false;

        public function ContentLoader(_arg1:String, _arg2:Boolean=true, _arg3:LoaderContext=null){
            var _local4:LoaderContext;
            super();
            this.uri_load = _arg1;
            if (_arg3 != null){
                this.context = _arg3;
            } else {
                _local4 = new LoaderContext();
                _local4.checkPolicyFile = true;
                this.context = _local4;
            };
            addEventListener(Event.REMOVED_FROM_STAGE, this.destroy, false, 0, true);
            this.configureListeners(contentLoaderInfo);
            if (_arg2){
                trace("ContentLoader: Attenzione ad eventuali listener che potrebbero non funzionare");
                this.start();
            };
        }
        public function start():void{
            var request:* = null;
            if (!this.lStarted){
                this.lStarted = true;
                request = new URLRequest(this.uri_load);
                try {
                    load(request, this.context);
                } catch(e:SecurityError) {
                    securityErrorHandler(e);
                };
            };
        }
        private function configureListeners(_arg1:IEventDispatcher):void{
            _arg1.addEventListener(Event.COMPLETE, this.completeHandler, false, 0, true);
            _arg1.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler, false, 0, true);
            _arg1.addEventListener(Event.INIT, this.initHandler, false, 0, true);
            _arg1.addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler, false, 0, true);
            _arg1.addEventListener(Event.OPEN, this.openHandler, false, 0, true);
            _arg1.addEventListener(ProgressEvent.PROGRESS, this.progressHandler, false, 0, true);
            _arg1.addEventListener(Event.UNLOAD, this.unLoadHandler, false, 0, true);
        }
        private function removeListeners(_arg1:IEventDispatcher):void{
            _arg1.removeEventListener(Event.COMPLETE, this.completeHandler);
            _arg1.removeEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler);
            _arg1.removeEventListener(Event.INIT, this.initHandler);
            _arg1.removeEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            _arg1.removeEventListener(Event.OPEN, this.openHandler);
            _arg1.removeEventListener(ProgressEvent.PROGRESS, this.progressHandler);
            _arg1.removeEventListener(Event.UNLOAD, this.unLoadHandler);
        }
        private function completeHandler(_arg1:Event):void{
            this.removeListeners(contentLoaderInfo);
            this.ready = true;
            var _local2:BlackBoard = new BlackBoard();
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.COMPLETE, this, _local2));
        }
        private function httpStatusHandler(_arg1:HTTPStatusEvent):void{
            var _local2:BlackBoard = new BlackBoard();
            _local2.set("status", _arg1.status);
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.HTTP_STATUS, this, _local2));
        }
        private function initHandler(_arg1:Event):void{
            var _local2:BlackBoard = new BlackBoard();
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.INIT, this, _local2));
        }
        private function ioErrorHandler(_arg1:IOErrorEvent):void{
            this.removeListeners(contentLoaderInfo);
            trace(("Error opening file: " + this.uri_load));
            var _local2:BlackBoard = new BlackBoard();
            _local2.set("text", _arg1.text);
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.IO_ERROR, this, _local2));
        }
        private function openHandler(_arg1:Event):void{
            var _local2:BlackBoard = new BlackBoard();
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.OPEN, this, _local2));
        }
        private function progressHandler(_arg1:ProgressEvent):void{
            var _local2:BlackBoard = new BlackBoard();
            _local2.set("bytesLoaded", _arg1.bytesLoaded);
            _local2.set("bytesTotal", _arg1.bytesTotal);
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.PROGRESS, this, _local2));
        }
        private function unLoadHandler(_arg1:Event):void{
            var _local2:BlackBoard = new BlackBoard();
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.UNLOAD, this, _local2));
        }
        private function securityErrorHandler(_arg1:SecurityError):void{
            this.removeListeners(contentLoaderInfo);
            trace(("Security error opening file: " + this.uri_load));
            var _local2:BlackBoard = new BlackBoard();
            _local2.set("securityError", _arg1);
            dispatchEvent(new ContentLoaderEvent(ContentLoaderEvent.SECURITY_ERROR, this, _local2));
        }
        public function destroy(_arg1:Event=null):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, this.destroy);
            try {
                close();
            } catch(error:Error) {
            };
        }
        public function getContent():DisplayObject{
            return (contentLoaderInfo.content);
        }
        public function isReady():Boolean{
            return (this.ready);
        }

    }
}//package com.panico.utils.clips 
﻿package com.panico.utils.clips {
    import flash.text.*;
    import flash.display.*;

    public class Loading extends Sprite {

        protected var clip:Sprite = null;
        protected var textfield:TextField = null;
        protected var percent:Number = 0;
        protected var container:Sprite = null;

        public function Loading():void{
            this.container = this;
            this.name = "mcContainer";
        }
        public function updatePercent(_arg1:int, _arg2:int):void{
            if (_arg1 == _arg2){
                if (_arg1 < 4){
                    this.percent = 0;
                } else {
                    this.percent = 100;
                };
            } else {
                this.percent = Math.floor(((_arg1 * 100) / _arg2));
            };
        }
        public function getPercent():Number{
            return (this.percent);
        }
        public function getTextField():TextField{
            return (this.textfield);
        }
        public function getClip():Sprite{
            return (this.clip);
        }

    }
}//package com.panico.utils.clips 
﻿package com.panico.utils {
    import flash.events.*;
    import flash.display.*;
    import com.panico.utils.xml.*;
    import com.panico.utils.data.*;
    import flash.net.*;
    import com.panico.utils.clips.*;
    import com.panico.utils.events.*;

    public class Int21h_light extends Sprite {

        private static var container:Sprite = null;
        private static var context:Stage = null;
        private static var global_xml_debug:Boolean = false;

        public static function init(_arg1:Stage):void{
            Int21h_light.context = _arg1;
            if (Int21h_light.container == null){
                Int21h_light.container = new Sprite();
                Int21h_light.context.addChild(Int21h_light.container);
            };
        }
        public static function bringToTop(_arg1:DisplayObject, _arg2:DisplayObjectContainer):void{
            var _local3:int = (_arg2.numChildren - 1);
            _arg2.setChildIndex(_arg1, _local3);
        }
        public static function enableHandCursor(_arg1):void{
            _arg1.useHandCursor = true;
            _arg1.buttonMode = true;
        }
        private static function dummy(_arg1:MouseEvent):void{
        }
        public static function loadContent(_arg1:String, _arg2:Function=null, _arg3:String=null):ContentLoader{
            var _local4:ContentLoader;
            _local4 = new ContentLoader(_arg1, false);
            if (_arg3 != null){
                _local4.name = _arg3;
            };
            if (_arg2 != null){
                _local4.addEventListener(ContentLoaderEvent.INIT, _arg2, false, 0, true);
            };
            return (_local4);
        }
        public static function sendAndLoad(_arg1:String, _arg2:String=null, _arg3:Function=null, _arg4:BlackBoard=null, _arg5:Loading=null, _arg6:Boolean=false):XmlManager{
            var _local7:XmlManager = new XmlManager(_arg1, _arg2, false, _arg5, _arg4);
            _local7.addEventListener(XmlManagerEvent.READY, _arg3, false, 0, true);
            _local7.addEventListener(XmlManagerEvent.ERROR, _arg3, false, 0, true);
            _local7.setDebug(_arg6);
            if (global_xml_debug){
                _local7.setDebug(true);
            };
            _local7.start();
            return (_local7);
        }
        public static function setGlobalXmlDebug(_arg1:Boolean):void{
            global_xml_debug = _arg1;
        }
        public static function safeContains(_arg1:DisplayObject, _arg2:DisplayObjectContainer):Boolean{
            var _local3:Boolean;
            if (_arg1 != null){
                if (_arg2.contains(_arg1)){
                    _local3 = true;
                };
            };
            return (_local3);
        }
        public static function safeRemove(_arg1:DisplayObject, _arg2:DisplayObjectContainer):Boolean{
            var _local3:Boolean;
            if (safeContains(_arg1, _arg2)){
                _arg2.removeChild(_arg1);
                _local3 = true;
            };
            return (_local3);
        }
        public static function makeButton(_arg1:Sprite, _arg2:Boolean=true):Sprite{
            var _local3:MovieClip;
            _arg1.buttonMode = true;
            _arg1.mouseChildren = false;
            if (_arg2){
                _arg1.useHandCursor = true;
            };
            _arg1.tabEnabled = false;
            if ((_arg1 is MovieClip)){
                _local3 = (_arg1 as MovieClip);
                _local3.gotoAndStop(0);
            };
            return (_arg1);
        }
        public static function lorem():String{
            return ("Lorem ipsum causae adversarium per no, est ipsum numquam suscipiantur eu.\nPrima affert exerci vix in, usu in eleifend pericula, est no odio diam vocent.\nSonet imperdiet ea has, ad minim persius vim, puto audiam cu nam.\nHas reformidans contentiones te.\nSoleat partiendo philosophia no sed.\nCu quo nusquam moderatius.\nEx quodsi accusam est, ex pro quod diceret expetendis, primis molestie ad pro.\nMutat legere noluisse an pri, eam putent adolescens ut.\nNo qui legendos posidonium.\nOmnes ridens omnium sed ne, ea duis altera recusabo est, ei eum suas liber affert.\nAt sit iriure qualisque sententiae, no eum tollit primis, eu est takimata conceptam voluptaria.\nQui tamquam quaestio forensibus ea, causae latine his cu.\nEt tincidunt sadipscing omittantur qui, in persius nusquam ancillae vel, vis ea ceteros voluptatum.\nMei sint aeterno ei, ad deserunt recteque vix, vix eu magna consul.\nEu pro munere molestie.\nDolor munere posidonium et ius.\nSale inani causae cum ne.\nDicta regione te ius, per ad summo mazim saepe, eu pro prima error evertitur.\nIn verterem conceptam vim, facete inermis liberavisse in est.\nMei paulo legimus id, persecuti definiebas vim ex.\nPossit recteque mel in, eius fastidii voluptatibus pro at.\nEum eu dicam utroque, quo ea saepe patrioque moderatius, mea at quem oratio quaerendum.\nAn pro aliquam eligendi delicata.\nElitr aperiam invenire ius te, sit virtute eligendi molestiae an, ei eam laoreet detracto dignissim.\nAdhuc consul melius cum et.\nTota conceptam eos in.\nNe nusquam fierent consequuntur quo.\nLorem ipsum causae adversarium per no, est ipsum numquam suscipiantur eu.\nPrima affert exerci vix in, usu in eleifend pericula, est no odio diam vocent.\nSonet imperdiet ea has, ad minim persius vim, puto audiam cu nam.\nHas reformidans contentiones te.\nSoleat partiendo philosophia no sed.\nCu quo nusquam moderatius.\nEx quodsi accusam est, ex pro quod diceret expetendis, primis molestie ad pro.\nMutat legere noluisse an pri, eam putent adolescens ut.\nNo qui legendos posidonium.\nOmnes ridens omnium sed ne, ea duis altera recusabo est, ei eum suas liber affert.\nAt sit iriure qualisque sententiae, no eum tollit primis, eu est takimata conceptam voluptaria.\nQui tamquam quaestio forensibus ea, causae latine his cu.\nEt tincidunt sadipscing omittantur qui, in persius nusquam ancillae vel, vis ea ceteros voluptatum.\nMei sint aeterno ei, ad deserunt recteque vix, vix eu magna consul.\nEu pro munere molestie.\nDolor munere posidonium et ius.\nSale inani causae cum ne.\nDicta regione te ius, per ad summo mazim saepe, eu pro prima error evertitur.\nIn verterem conceptam vim, facete inermis liberavisse in est.\nMei paulo legimus id, persecuti definiebas vim ex.\nPossit recteque mel in, eius fastidii voluptatibus pro at.\nEum eu dicam utroque, quo ea saepe patrioque moderatius, mea at quem oratio quaerendum.\nAn pro aliquam eligendi delicata.\nElitr aperiam invenire ius te, sit virtute eligendi molestiae an, ei eam laoreet detracto dignissim.\nAdhuc consul melius cum et.\nTota conceptam eos in.\nNe nusquam fierent consequuntur quo.\nLorem ipsum causae adversarium per no, est ipsum numquam suscipiantur eu. Prima affert exerci vix in, usu in eleifend pericula, est no odio diam vocent. Sonet imperdiet ea has, ad minim persius vim, puto audiam cu nam.\nHas reformidans contentiones te. Soleat partiendo philosophia no sed.\nCu quo nusquam moderatius. Ex quodsi accusam est, ex pro quod diceret expetendis, primis molestie ad pro.\nMutat legere noluisse an pri, eam putent adolescens ut. No qui legendos posidonium.\nOmnes ridens omnium sed ne, ea duis altera recusabo est, ei eum suas liber affert. At sit iriure qualisque sententiae, no eum tollit primis, eu est takimata conceptam voluptaria.\nQui tamquam quaestio forensibus ea, causae latine his cu. Et tincidunt sadipscing omittantur qui, in persius nusquam ancillae vel, vis ea ceteros voluptatum.\nMei sint aeterno ei, ad deserunt recteque vix, vix eu magna consul. Eu pro munere molestie.\nDolor munere posidonium et ius. Sale inani causae cum ne.\nDicta regione te ius, per ad summo mazim saepe, eu pro prima error evertitur. In verterem conceptam vim, facete inermis liberavisse in est.\nMei paulo legimus id, persecuti definiebas vim ex. Possit recteque mel in, eius fastidii voluptatibus pro at.\nEum eu dicam utroque, quo ea saepe patrioque moderatius, mea at quem oratio quaerendum. An pro aliquam eligendi delicata. Elitr aperiam invenire ius te, sit virtute eligendi molestiae an, ei eam laoreet detracto dignissim.");
        }
        public static function getUrl(_arg1:String, _arg2:String="_blank"):void{
            var _local3:String = ("" + _arg1);
            var _local4:URLRequest = new URLRequest(_local3);
            try {
                navigateToURL(_local4, _arg2);
            } catch(e:Error) {
            };
        }
        public static function rnd(_arg1:Number, _arg2:Number=0):Number{
            var _local3:Number = (Math.floor((Math.random() * ((_arg1 - _arg2) + 1))) + _arg2);
            return (_local3);
        }

    }
}//package com.panico.utils 
﻿package com.panico.utils.xml {
    import flash.events.*;
    import com.panico.utils.data.*;
    import flash.net.*;
    import com.panico.utils.clips.*;
    import com.panico.utils.events.*;

    public class XmlManager extends EventDispatcher {

        protected static var debugcount:Number = 0;

        protected var uri_xml:String = null;
        protected var send_xml:String = null;
        protected var ur:URLRequest = null;
        protected var cu:ContentUrlLoader = null;
        protected var loading:Loading = null;
        protected var dataloaded:String = null;
        protected var xml:XML = null;
        protected var debug:Boolean = false;
        protected var debugnumber:Number = 0;
        protected var blackboard:BlackBoard;

        public function XmlManager(_arg1:String, _arg2:String=null, _arg3:Boolean=false, _arg4:Loading=null, _arg5:BlackBoard=null):void{
            XML.setSettings(XML.defaultSettings());
            this.uri_xml = _arg1;
            this.send_xml = _arg2;
            this.loading = _arg4;
            this.blackboard = _arg5;
            this.build();
            if (_arg3){
                this.start();
            };
        }
        protected function build():void{
            this.ur = new URLRequest(this.uri_xml);
            this.ur.contentType = "text/xml";
            this.ur.method = URLRequestMethod.POST;
            if (this.send_xml != null){
                this.ur.data = this.send_xml;
            };
            this.cu = new ContentUrlLoader(this.ur, false, URLLoaderDataFormat.TEXT);
            if (this.loading != null){
                this.cu.addEventListener(ContentUrlLoaderEvent.PROGRESS, this.loadProgress, false, 0, true);
            };
            this.cu.addEventListener(ContentUrlLoaderEvent.SECURITY_ERROR, this.securityError, false, 0, true);
            this.cu.addEventListener(ContentUrlLoaderEvent.IO_ERROR, this.loadError, false, 0, true);
            this.cu.addEventListener(ContentUrlLoaderEvent.COMPLETE, this.loadOk, false, 0, true);
        }
        public function start():void{
            if (this.debug){
                this.debugnumber = debugcount++;
                trace(((((("Invio numero: " + this.debugnumber) + "\nInvio a:\n") + this.uri_xml) + "\n\nQuesto xml:\n") + new XML(this.send_xml)));
            };
            this.cu.start();
        }
        public function getData():String{
            return (this.dataloaded);
        }
        public function getXml():XML{
            return (this.xml);
        }
        public function setDebug(_arg1:Boolean):void{
            this.debug = _arg1;
        }
        protected function loadProgress(_arg1:ContentUrlLoaderEvent):void{
            var _local2:BlackBoard = _arg1.getBlackBoard();
            this.loading.updatePercent(_local2.get("bytesLoaded"), _local2.get("bytesTotal"));
            if (this.loading.getPercent() == 100){
                this.cu.removeEventListener(ContentUrlLoaderEvent.PROGRESS, this.loadProgress);
            };
        }
        protected function loadError(_arg1:ContentUrlLoaderEvent):void{
            if (this.debug){
                trace((("Ricezione relativa al numero: " + this.debugnumber) + "\nRicevo:\nErrore in ricezione!"));
            };
            dispatchEvent(new XmlManagerEvent(XmlManagerEvent.ERROR, this, false, _arg1.getBlackBoard()));
        }
        protected function securityError(_arg1:ContentUrlLoaderEvent):void{
            if (this.debug){
                trace((("Ricezione relativa al numero: " + this.debugnumber) + "\nRicevo:\nSecurity error!"));
            };
            dispatchEvent(new XmlManagerEvent(XmlManagerEvent.ERROR, this, false, _arg1.getBlackBoard()));
        }
        protected function loadOk(_arg1:ContentUrlLoaderEvent):void{
            this.cu.removeEventListener(ContentUrlLoaderEvent.SECURITY_ERROR, this.securityError);
            this.cu.removeEventListener(ContentUrlLoaderEvent.IO_ERROR, this.loadError);
            this.cu.removeEventListener(ContentUrlLoaderEvent.COMPLETE, this.loadOk);
            this.dataloaded = _arg1.getBlackBoard().get("data");
            this.parseData();
            if (this.debug){
                trace(((("Ricezione relativa al numero: " + this.debugnumber) + "\nRicevo:\n") + new XML(this.dataloaded)));
            };
            dispatchEvent(new XmlManagerEvent(XmlManagerEvent.READY, this, true, _arg1.getBlackBoard()));
        }
        protected function parseData():void{
            this.xml = new XML(this.dataloaded);
        }

    }
}//package com.panico.utils.xml 
﻿package com.panico.utils.interfaces {

    public interface IDebug {

        function print():void;
        function toString():String;

    }
}//package com.panico.utils.interfaces 
﻿package com.panico.utils.data {
    import com.panico.utils.interfaces.*;

    public class BlackBoard implements IDebug {

        protected var board:Object = null;

        public function BlackBoard(){
            this.board = new Object();
        }
        public function set(_arg1:String, _arg2):void{
            this.board[_arg1] = _arg2;
        }
        public function get(_arg1:String){
            return (this.board[_arg1]);
        }
        public function clear():void{
            var _local1:String;
            for (_local1 in this.board) {
                delete this.board[_local1];
            };
        }
        public function toString():String{
            var _local2:String;
            var _local1 = "";
            for (_local2 in this.board) {
                _local1 = (_local1 + (((_local2 + "=") + this.board[_local2]) + "\n"));
            };
            return (_local1);
        }
        public function print():void{
            trace(this.board);
        }
        public function getBoard():Object{
            return (this.board);
        }

    }
}//package com.panico.utils.data 
﻿package com.panico.utils.events {
    import flash.events.*;
    import com.panico.utils.data.*;
    import flash.net.*;

    public class ContentUrlLoaderEvent extends Event {

        public static const HTTP_STATUS:String = "httpStatus";
        public static const IO_ERROR:String = "ioError";
        public static const COMPLETE:String = "complete";
        public static const INIT:String = "init";
        public static const OPEN:String = "open";
        public static const PROGRESS:String = "progress";
        public static const UNLOAD:String = "unload";
        public static const SECURITY_ERROR:String = "security";

        protected var blackboard:BlackBoard = null;
        protected var ldr:URLLoader = null;

        public function ContentUrlLoaderEvent(_arg1:String, _arg2:URLLoader, _arg3:BlackBoard){
            super(_arg1);
            this.ldr = _arg2;
            this.blackboard = _arg3;
        }
        public function getBlackBoard():BlackBoard{
            return (this.blackboard);
        }
        public function getClipLoaded():URLLoader{
            return (this.ldr);
        }
        override public function clone():Event{
            return (new ContentUrlLoaderEvent(type, this.ldr, this.blackboard));
        }

    }
}//package com.panico.utils.events 
﻿package com.panico.utils.events {
    import flash.events.*;
    import com.panico.utils.xml.*;
    import com.panico.utils.data.*;

    public class XmlManagerEvent extends Event {

        public static const READY:String = "ready";
        public static const ERROR:String = "error";
        public static const HTTP_STATUS:String = "http_status";

        protected var xmlmanager:XmlManager = null;
        protected var loadok:Boolean = false;
        protected var blackboard:BlackBoard = null;

        public function XmlManagerEvent(_arg1:String, _arg2:XmlManager, _arg3:Boolean, _arg4:BlackBoard):void{
            super(_arg1);
            this.loadok = _arg3;
            this.xmlmanager = _arg2;
            this.blackboard = _arg4;
        }
        public function getXmlManager():XmlManager{
            return (this.xmlmanager);
        }
        public function loadOk():Boolean{
            return (this.loadok);
        }
        public function getBlackBoard():BlackBoard{
            return (this.blackboard);
        }
        override public function clone():Event{
            return (new XmlManagerEvent(type, this.xmlmanager, this.loadok, this.blackboard));
        }

    }
}//package com.panico.utils.events 
﻿package com.panico.utils.events {
    import flash.events.*;
    import flash.display.*;
    import com.panico.utils.data.*;

    public class ContentLoaderEvent extends Event {

        public static const HTTP_STATUS:String = "httpStatus";
        public static const IO_ERROR:String = "ioError";
        public static const COMPLETE:String = "complete";
        public static const INIT:String = "init";
        public static const OPEN:String = "open";
        public static const PROGRESS:String = "progress";
        public static const UNLOAD:String = "unload";
        public static const SECURITY_ERROR:String = "securityError";

        protected var blackboard:BlackBoard = null;
        protected var ldr:Loader = null;

        public function ContentLoaderEvent(_arg1:String, _arg2:Loader, _arg3:BlackBoard){
            super(_arg1);
            this.ldr = _arg2;
            this.blackboard = _arg3;
        }
        public function getBlackBoard():BlackBoard{
            return (this.blackboard);
        }
        public function getClipLoaded():Loader{
            return (this.ldr);
        }
        override public function clone():Event{
            return (new ContentLoaderEvent(type, this.ldr, this.blackboard));
        }

    }
}//package com.panico.utils.events 
﻿package com.hybrid.ui {
    import flash.events.*;
    import flash.text.*;
    import flash.display.*;
    import fl.transitions.*;
    import fl.transitions.easing.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.filters.*;

    public class ToolTip_Win extends Sprite {

        private var _stage:Stage;
        private var _parentObject:DisplayObject;
        private var _tf:TextField;
        private var _cf:TextField;
        private var _tween:Tween;
        private var _titleFormat:TextFormat;
        private var _contentFormat:TextFormat;
        private var _titleOverride:Boolean = false;
        private var _contentOverride:Boolean = false;
        private var _defaultWidth:Number = 180;
        private var _buffer:Number = 5;
        private var _align:String = "center";
        private var _cornerRadius:Number = 12;
        private var _bgColors:Array;
        private var _autoSize:Boolean = false;
        private var _hookEnabled:Boolean = false;
        private var _delay:Number = 0;
        private var _hookSize:Number = 5;
        private var _lang:String = "en";
        private var _offSet:Number;
        private var _hookOffSet:Number;
        private var _timer:Timer;

        public function ToolTip_Win():void{
            this._bgColors = [16772272, 16772272];
            super();
            this.mouseEnabled = false;
            this.buttonMode = false;
            this.mouseChildren = false;
            this._timer = new Timer(this._delay, 1);
            this._timer.addEventListener("timer", this.timerHandler);
        }
        public function show(_arg1:DisplayObject, _arg2:String, _arg3:String=null, _arg4:String=null):void{
            this._stage = _arg1.stage;
            this._parentObject = _arg1;
            if (_arg4 != null){
                this._lang = _arg4;
            };
            this.addCopy(_arg2, _arg3);
            this.setOffset();
            this.drawBG();
            this.bgGlow();
            var _local5:Point = new Point(this._parentObject.mouseX, this._parentObject.mouseY);
            var _local6:Point = _arg1.localToGlobal(_local5);
            this.x = (_local6.x + this._offSet);
            this.y = ((_local6.y - this.height) - 10);
            this.alpha = 0;
            this._stage.addChild(this);
            this._parentObject.addEventListener(MouseEvent.MOUSE_OUT, this.onMouseOut);
            this.follow(true);
            this._timer.start();
        }
        public function hide():void{
            this.animate(false);
        }
        private function timerHandler(_arg1:TimerEvent):void{
            this.animate(true);
        }
        private function onMouseOut(_arg1:MouseEvent):void{
            _arg1.currentTarget.removeEventListener(_arg1.type, arguments.callee);
            this.hide();
        }
        private function follow(_arg1:Boolean):void{
            if (_arg1){
                addEventListener(Event.ENTER_FRAME, this.eof);
            } else {
                removeEventListener(Event.ENTER_FRAME, this.eof);
            };
        }
        private function eof(_arg1:Event):void{
            this.position();
        }
        private function position():void{
            var _local1:Number = 3;
            var _local2:Point = new Point(this._parentObject.mouseX, this._parentObject.mouseY);
            var _local3:Point = this._parentObject.localToGlobal(_local2);
            var _local4:Number = (_local3.x + this._offSet);
            var _local5:Number = ((_local3.y - this.height) - 10);
            var _local6:Number = (this._defaultWidth + _local4);
            if (_local6 > stage.stageWidth){
                _local4 = (stage.stageWidth - this._defaultWidth);
            };
            if (_local4 < 0){
                _local4 = 0;
            };
            if (_local5 < 0){
                _local5 = 0;
            };
            this.x = (this.x + ((_local4 - this.x) / _local1));
            this.y = (this.y + ((_local5 - this.y) / _local1));
        }
        private function addCopy(_arg1:String, _arg2:String):void{
            var _local4:Boolean;
            var _local5:Rectangle;
            var _local6:Number;
            if (!this._titleOverride){
                this.initTitleFormat();
            };
            var _local3:Boolean = this.isDeviceFont(this._titleFormat);
            this._tf = this.createField(_local3);
            this._tf.text = _arg1;
            this._tf.antiAliasType = AntiAliasType.ADVANCED;
            this._tf.setTextFormat(this._titleFormat, 0, _arg1.length);
            if (this._autoSize){
                this._defaultWidth = ((this._tf.textWidth + 4) + (this._buffer * 2));
            } else {
                this._tf.width = (this._defaultWidth - (this._buffer * 2));
            };
            this._tf.x = this._buffer;
            this._tf.y = 0;
            addChild(this._tf);
            if (_arg2 != null){
                if (!this._contentOverride){
                    this.initContentFormat();
                };
                _local4 = this.isDeviceFont(this._contentFormat);
                this._cf = this.createField(_local4);
                this._cf.htmlText = _arg2;
                _local5 = this.getBounds(this);
                this._cf.x = this._buffer;
                this._cf.y = ((_local5.height - this._cf.height) / 2);
                this._cf.setTextFormat(this._contentFormat);
                if (this._autoSize){
                    _local6 = ((this._cf.textWidth + 4) + (this._buffer * 2));
                    this._defaultWidth = (((_local6 > this._defaultWidth)) ? _local6 : this._defaultWidth);
                } else {
                    this._cf.width = (this._defaultWidth - (this._buffer * 2));
                };
                addChild(this._cf);
            };
        }
        private function createField(_arg1:Boolean):TextField{
            var _local2:TextField = new TextField();
            _local2.embedFonts = !(_arg1);
            _local2.gridFitType = "pixel";
            _local2.autoSize = TextFieldAutoSize.LEFT;
            _local2.selectable = false;
            if (!this._autoSize){
                _local2.multiline = true;
                _local2.wordWrap = true;
            };
            return (_local2);
        }
        private function drawBG():void{
            var _local9:Number;
            var _local10:Number;
            var _local11:Number;
            var _local12:Number;
            var _local1:Rectangle = this.getBounds(this);
            var _local2:String = GradientType.LINEAR;
            var _local3:Array = [0xFFFFFF, 0x9C9C9C];
            var _local4:Array = [1, 1];
            var _local5:Array = [0, 0xFF];
            var _local6:Matrix = new Matrix();
            var _local7:Number = ((90 * Math.PI) / 180);
            _local6.createGradientBox(this._defaultWidth, (_local1.height + (this._buffer * 2)), _local7, 0, 0);
            var _local8:String = SpreadMethod.PAD;
            this.graphics.beginGradientFill(_local2, this._bgColors, _local4, _local5, _local6, _local8);
            if (this._hookEnabled){
                _local9 = 0;
                _local10 = 0;
                _local11 = this._defaultWidth;
                _local12 = _local1.height;
                this.graphics.lineStyle(1, 0x999999, 1, true);
                this.graphics.moveTo((_local9 + this._cornerRadius), _local10);
                this.graphics.lineTo(((_local9 + _local11) - this._cornerRadius), _local10);
                this.graphics.curveTo((_local9 + _local11), _local10, (_local9 + _local11), (_local10 + this._cornerRadius));
                this.graphics.lineTo((_local9 + _local11), ((_local10 + _local12) - this._cornerRadius));
                this.graphics.curveTo((_local9 + _local11), (_local10 + _local12), ((_local9 + _local11) - this._cornerRadius), (_local10 + _local12));
                this.graphics.lineTo(((_local9 + this._hookOffSet) + this._hookSize), (_local10 + _local12));
                this.graphics.lineTo((_local9 + this._hookOffSet), ((_local10 + _local12) + this._hookSize));
                this.graphics.lineTo(((_local9 + this._hookOffSet) - this._hookSize), (_local10 + _local12));
                this.graphics.lineTo((_local9 + this._cornerRadius), (_local10 + _local12));
                this.graphics.curveTo(_local9, (_local10 + _local12), _local9, ((_local10 + _local12) - this._cornerRadius));
                this.graphics.lineTo(_local9, (_local10 + this._cornerRadius));
                this.graphics.curveTo(_local9, _local10, (_local9 + this._cornerRadius), _local10);
                this.graphics.endFill();
            } else {
                this.graphics.drawRoundRect(0, 0, this._defaultWidth, (_local1.height + (this._buffer * 2)), this._cornerRadius);
            };
        }
        private function animate(_arg1:Boolean):void{
            var _local2:int = (((_arg1 == true)) ? 1 : 0);
            this._tween = new Tween(this, "alpha", Strong.easeOut, this.alpha, _local2, 0.5, true);
            if (!_arg1){
                this._tween.addEventListener(TweenEvent.MOTION_FINISH, this.onComplete);
                this._timer.reset();
            };
        }
        private function onComplete(_arg1:TweenEvent):void{
            _arg1.currentTarget.removeEventListener(_arg1.type, arguments.callee);
            this.cleanUp();
        }
        public function set tipWidth(_arg1:Number):void{
            trace("tipWidth", _arg1);
            this._defaultWidth = _arg1;
        }
        public function set titleFormat(_arg1:TextFormat):void{
            this._titleFormat = _arg1;
            if (this._titleFormat.font == null){
                this._titleFormat.font = "Arial";
            };
            this._titleOverride = true;
        }
        public function set contentFormat(_arg1:TextFormat):void{
            this._contentFormat = _arg1;
            if (this._contentFormat.font == null){
                this._contentFormat.font = "Arial";
            };
            this._contentOverride = true;
        }
        public function set align(_arg1:String):void{
            var _local2:String = _arg1.toLowerCase();
            var _local3 = "right left center";
            if (_local3.indexOf(_arg1) == -1){
                throw (new Error((this + " : Invalid Align Property, options are: 'right', 'left' & 'center'")));
            };
            this._align = _local2;
        }
        public function set delay(_arg1:Number):void{
            this._delay = _arg1;
            this._timer.delay = _arg1;
        }
        public function set hook(_arg1:Boolean):void{
            this._hookEnabled = _arg1;
        }
        public function set hookSize(_arg1:Number):void{
            this._hookSize = _arg1;
        }
        public function set cornerRadius(_arg1:Number):void{
            this._cornerRadius = _arg1;
        }
        public function set colors(_arg1:Array):void{
            this._bgColors = _arg1;
        }
        public function set autoSize(_arg1:Boolean):void{
            this._autoSize = _arg1;
        }
        private function textGlow(_arg1:TextField):void{
            var _local2:Number = 0;
            var _local3:Number = 0.35;
            var _local4:Number = 2;
            var _local5:Number = 2;
            var _local6:Number = 1;
            var _local7:Boolean;
            var _local8:Boolean;
            var _local9:Number = BitmapFilterQuality.HIGH;
            var _local10:GlowFilter = new GlowFilter(_local2, _local3, _local4, _local5, _local6, _local9, _local7, _local8);
            var _local11:Array = new Array();
            _local11.push(_local10);
            _arg1.filters = _local11;
        }
        private function bgGlow():void{
            var _local1:Number = 0;
            var _local2:Number = 0.2;
            var _local3:Number = 5;
            var _local4:Number = 5;
            var _local5:Number = 1;
            var _local6:Boolean;
            var _local7:Boolean;
            var _local8:Number = BitmapFilterQuality.HIGH;
            var _local9:GlowFilter = new GlowFilter(_local1, _local2, _local3, _local4, _local5, _local8, _local6, _local7);
            var _local10:Array = new Array();
            _local10.push(_local9);
            filters = _local10;
        }
        private function initTitleFormat():void{
            this._titleFormat = new TextFormat();
            this._titleFormat.font = "Arial";
            this._titleFormat.bold = true;
            this._titleFormat.size = 10;
            this._titleFormat.color = 0x666666;
        }
        private function initContentFormat():void{
            this._contentFormat = new TextFormat();
            this._contentFormat.font = "Arial";
            this._contentFormat.bold = false;
            this._contentFormat.size = 8;
            this._contentFormat.color = 0x333333;
        }
        private function isDeviceFont(_arg1:TextFormat):Boolean{
            var _local2:String = _arg1.font;
            var _local3 = "Arial _sans _serif _typewriter";
            return ((_local3.indexOf(_local2) > -1));
        }
        private function setOffset():void{
            switch (this._align){
                case "left":
                    this._offSet = ((-(this._defaultWidth) + (this._buffer * 3)) + this._hookSize);
                    this._hookOffSet = ((this._defaultWidth - (this._buffer * 3)) - this._hookSize);
                    break;
                case "right":
                    this._offSet = ((0 - (this._buffer * 3)) - this._hookSize);
                    this._hookOffSet = ((this._buffer * 3) + this._hookSize);
                    break;
                case "center":
                    this._offSet = -((this._defaultWidth / 2));
                    this._hookOffSet = (this._defaultWidth / 2);
                    break;
                default:
                    this._offSet = -((this._defaultWidth / 2));
                    this._hookOffSet = (this._defaultWidth / 2);
            };
        }
        private function cleanUp():void{
            this._parentObject.removeEventListener(MouseEvent.MOUSE_OUT, this.onMouseOut);
            this.follow(false);
            this._tf.filters = [];
            this.filters = [];
            removeChild(this._tf);
            this._tf = null;
            if (this._cf != null){
                this._cf.filters = [];
                removeChild(this._cf);
            };
            this.graphics.clear();
            parent.removeChild(this);
        }

    }
}//package com.hybrid.ui 
﻿package events {
    import flash.events.*;

    public class TeamStrEvent extends Event {

        public static const TEAMSTR:String = "teamstr";

        private var _myTeamStr:String;

        public function TeamStrEvent(_arg1:String, _arg2:String){
            this._myTeamStr = _arg2;
            super(_arg1);
        }
        public function get myTeamStr():String{
            return (this._myTeamStr);
        }
        override public function clone():Event{
            return (new TeamStrEvent(type, this._myTeamStr));
        }

    }
}//package events 
﻿package {
    import flash.events.*;
    import flash.text.*;
    import flash.display.*;
    import com.masteca.utils.utilities.*;
    import flash.system.*;
    import Utility.*;
    import flash.utils.*;
    import flash.geom.*;

    public class EmbedArea extends Sprite {

        private static const LEFT_MARGIN:int = 10;
        private static const RIGHT_MARGIN:int = 10;
        private static const TOP_MARGIN:int = 20;
        private static const BOTTOM_MARGIN:int = 25;
        private static const CLOSE_HALF_SIZE:int = 4;

        private static var TEXT_COPIED:String = "";

        private var embedField:TextField;
        private var seed:String;
        private var voc:Vocabulary;

        public function EmbedArea(_arg1:Vocabulary, _arg2:String=null){
            ((_arg2) && ((this.seed = _arg2)));
            this.voc = _arg1;
            TEXT_COPIED = this.voc.getWord("copyClipboard");
            addEventListener(Event.ADDED_TO_STAGE, this.onAdded);
            addEventListener(Event.REMOVED_FROM_STAGE, this.onRemoved);
        }
        private function createEmbedCode():String{
            var _local1:String = ((("http://www.fifa.com/flash/widgets/worldranking/app.swf?teamId=" + this.seed) + "&lang=") + LangFifaCom.language);
            return (new Array((("<object  width='300' height='400' " + "id='flashWorldRanking'") + " classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>"), (("<param name='movie' value='" + _local1) + "'/>"), "<param name='bgcolor' value='#ffffff'/>", "<param name='quality' value='high'/>", "<param name='wmode' value='transparent'/>", (((("<param name='flashvars' value='lang=" + LangFifaCom.language) + "&team=") + this.seed) + "'>"), (((((("<embed width='300' height='400' flashvars='lang=" + LangFifaCom.language) + "&amp;team=") + this.seed) + "' wmode='transparent' quality='high' bgcolor='#ffffff' name='flashWorldRanking' id='flashWorldRanking' src=") + _local1) + " type='application/x-shockwave-flash'/>"), "</object>").join("\n"));
        }
        private function onAdded(_arg1:Event):void{
            removeEventListener(Event.ADDED_TO_STAGE, this.onAdded);
            this.draw();
        }
        private function onRemoved(_arg1:Event):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, this.onRemoved);
        }
        private function draw():void{
            var _local1:Sprite = new Sprite();
            var _local2:int = ((stage.stageHeight - TOP_MARGIN) - BOTTOM_MARGIN);
            var _local3:int = ((stage.stageWidth - LEFT_MARGIN) - RIGHT_MARGIN);
            var _local4:TextField = this.createLabel(this.voc.getWord("embed").toUpperCase());
            _local4.x = LEFT_MARGIN;
            var _local5:Sprite = this.createCloseButton(CLOSE_HALF_SIZE);
            _local5.x = ((stage.stageWidth - RIGHT_MARGIN) - (CLOSE_HALF_SIZE * 2));
            _local5.y = ((TOP_MARGIN - (CLOSE_HALF_SIZE * 2)) / 2);
            _local5.addEventListener(MouseEvent.CLICK, this.remove);
            var _local6:Sprite = this.createEmbedField(_local3, _local2, LEFT_MARGIN, TOP_MARGIN);
            var _local7:Sprite = this.createCopyButton(60, 20);
            _local7.x = ((stage.stageWidth - RIGHT_MARGIN) - _local7.width);
            _local7.y = ((stage.stageHeight - BOTTOM_MARGIN) + ((BOTTOM_MARGIN - 20) / 2));
            _local1.addChild(_local6);
            _local1.addChild(_local4);
            _local1.addChild(_local5);
            _local1.addChild(_local7);
            addChild(_local1);
        }
        function remove(_arg1:MouseEvent):void{
            this.parent.removeChild(this);
        }
        private function copyText(_arg1:MouseEvent):void{
            this.embedField.setSelection(0, this.embedField.text.length);
            System.setClipboard(this.embedField.text);
            trace(("copied: " + this.embedField.text));
            this.showFeedback(TEXT_COPIED);
        }
        private function showFeedback(_arg1:String):void{
            var feedBack:* = null;
            var s:* = _arg1;
            feedBack = new Sprite();
            var l:* = this.createLabel(s, 11);
            l.x = (l.y = 4);
            var g:* = feedBack.graphics;
            g.beginFill(16579294);
            g.drawRect(0, 0, (l.width + 8), (l.height + 8));
            feedBack.addChild(l);
            feedBack.x = LEFT_MARGIN;
            feedBack.y = ((stage.stageHeight - feedBack.height) - BOTTOM_MARGIN);
            addChild(feedBack);
            setTimeout(function ():void{
                removeChild(feedBack);
            }, 1000);
        }
        private function createEmbedField(_arg1:int, _arg2:int, _arg3:int, _arg4:int):Sprite{
            var _local5:Sprite;
            _local5 = new Sprite();
            _local5.graphics.beginFill(0xEFEFEF);
            _local5.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);
            var _local6:Shape = new Shape();
            _local6.x = _arg3;
            _local6.y = _arg4;
            _local6.graphics.beginFill(0xFFFFFF);
            _local6.graphics.lineStyle(1, 0xCCCCCC, 1, true, LineScaleMode.NORMAL, CapsStyle.ROUND, JointStyle.ROUND, 3);
            _local6.graphics.drawRoundRect(0, 0, _arg1, _arg2, 10, 10);
            this.embedField = new TextField();
            this.embedField.width = _arg1;
            this.embedField.height = _arg2;
            this.embedField.x = _arg3;
            this.embedField.y = _arg4;
            this.embedField.multiline = true;
            this.embedField.wordWrap = true;
            this.embedField.defaultTextFormat = new TextFormat("Verdana", 10, 0x666666);
            this.embedField.antiAliasType = AntiAliasType.ADVANCED;
            this.embedField.autoSize = TextFieldAutoSize.LEFT;
            this.embedField.text = this.createEmbedCode();
            _local5.addChild(_local6);
            _local5.addChild(this.embedField);
            return (_local5);
        }
        private function createLabel(_arg1:String, _arg2:int=11):TextField{
            var _local3:TextField = new TextField();
            _local3.selectable = false;
            _local3.multiline = false;
            _local3.defaultTextFormat = new TextFormat("Verdana", _arg2, 0, false);
            _local3.antiAliasType = AntiAliasType.ADVANCED;
            _local3.autoSize = TextFieldAutoSize.LEFT;
            _local3.text = _arg1;
            return (_local3);
        }
        private function createCloseButton(_arg1:int):Sprite{
            var _local2:Sprite = new Sprite();
            _local2.graphics.beginFill(0, 0);
            _local2.graphics.drawRect(-(_arg1), -(_arg1), (_arg1 * 4), (_arg1 * 4));
            _local2.graphics.endFill();
            _local2.graphics.lineStyle(3, 0x666666);
            _local2.graphics.moveTo(0, 0);
            _local2.graphics.lineTo((_arg1 * 2), (_arg1 * 2));
            _local2.graphics.moveTo((_arg1 * 2), 0);
            _local2.graphics.lineTo(0, (_arg1 * 2));
            _local2.buttonMode = true;
            _local2.mouseChildren = false;
            return (_local2);
        }
        private function createCopyButton(_arg1:int, _arg2:int):Sprite{
            var background:* = null;
            var onMouse:* = null;
            var w:* = _arg1;
            var h:* = _arg2;
            onMouse = function (_arg1:MouseEvent):void{
                switch (_arg1.type){
                    case MouseEvent.MOUSE_OVER:
                        background.scaleY = -1;
                        break;
                    case MouseEvent.MOUSE_OUT:
                        background.scaleY = 1;
                        break;
                };
            };
            var button:* = new Sprite();
            buttonMode = true;
            button.mouseChildren = false;
            background = new Sprite();
            var m:* = new Matrix();
            m.createGradientBox(w, h, (Math.PI / 2), 0, 0);
            background.graphics.beginGradientFill(GradientType.LINEAR, [0xE0E0E0, 0xCECECE], [1, 1], [0, 0xFF], m);
            background.graphics.drawRect(0, (-(h) / 2), w, h);
            background.y = (h / 2);
            button.addChild(background);
            var buttonLabel:* = this.createLabel(this.voc.getWord("copy").toUpperCase(), 10);
            button.addChild(buttonLabel);
            buttonLabel.x = ((w - buttonLabel.width) / 2);
            buttonLabel.y = ((h - buttonLabel.height) / 2);
            button.addEventListener(MouseEvent.MOUSE_OVER, onMouse);
            button.addEventListener(MouseEvent.MOUSE_OUT, onMouse);
            button.addEventListener(MouseEvent.CLICK, this.copyText);
            return (button);
        }

    }
}//package 
﻿package caurina.transitions {

    public class Equations {

        public function Equations(){
            trace("Equations is a static class and should not be instantiated.");
        }
        public static function init():void{
            Tweener.registerTransition("easenone", easeNone);
            Tweener.registerTransition("linear", easeNone);
            Tweener.registerTransition("easeinquad", easeInQuad);
            Tweener.registerTransition("easeoutquad", easeOutQuad);
            Tweener.registerTransition("easeinoutquad", easeInOutQuad);
            Tweener.registerTransition("easeoutinquad", easeOutInQuad);
            Tweener.registerTransition("easeincubic", easeInCubic);
            Tweener.registerTransition("easeoutcubic", easeOutCubic);
            Tweener.registerTransition("easeinoutcubic", easeInOutCubic);
            Tweener.registerTransition("easeoutincubic", easeOutInCubic);
            Tweener.registerTransition("easeinquart", easeInQuart);
            Tweener.registerTransition("easeoutquart", easeOutQuart);
            Tweener.registerTransition("easeinoutquart", easeInOutQuart);
            Tweener.registerTransition("easeoutinquart", easeOutInQuart);
            Tweener.registerTransition("easeinquint", easeInQuint);
            Tweener.registerTransition("easeoutquint", easeOutQuint);
            Tweener.registerTransition("easeinoutquint", easeInOutQuint);
            Tweener.registerTransition("easeoutinquint", easeOutInQuint);
            Tweener.registerTransition("easeinsine", easeInSine);
            Tweener.registerTransition("easeoutsine", easeOutSine);
            Tweener.registerTransition("easeinoutsine", easeInOutSine);
            Tweener.registerTransition("easeoutinsine", easeOutInSine);
            Tweener.registerTransition("easeincirc", easeInCirc);
            Tweener.registerTransition("easeoutcirc", easeOutCirc);
            Tweener.registerTransition("easeinoutcirc", easeInOutCirc);
            Tweener.registerTransition("easeoutincirc", easeOutInCirc);
            Tweener.registerTransition("easeinexpo", easeInExpo);
            Tweener.registerTransition("easeoutexpo", easeOutExpo);
            Tweener.registerTransition("easeinoutexpo", easeInOutExpo);
            Tweener.registerTransition("easeoutinexpo", easeOutInExpo);
            Tweener.registerTransition("easeinelastic", easeInElastic);
            Tweener.registerTransition("easeoutelastic", easeOutElastic);
            Tweener.registerTransition("easeinoutelastic", easeInOutElastic);
            Tweener.registerTransition("easeoutinelastic", easeOutInElastic);
            Tweener.registerTransition("easeinback", easeInBack);
            Tweener.registerTransition("easeoutback", easeOutBack);
            Tweener.registerTransition("easeinoutback", easeInOutBack);
            Tweener.registerTransition("easeoutinback", easeOutInBack);
            Tweener.registerTransition("easeinbounce", easeInBounce);
            Tweener.registerTransition("easeoutbounce", easeOutBounce);
            Tweener.registerTransition("easeinoutbounce", easeInOutBounce);
            Tweener.registerTransition("easeoutinbounce", easeOutInBounce);
        }
        public static function easeNone(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeInQuad(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            return ((((_arg3 * _arg1) * _arg1) + _arg2));
        }
        public static function easeOutQuad(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            return ((((-(_arg3) * _arg1) * (_arg1 - 2)) + _arg2));
        }
        public static function easeInOutQuad(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return (((((_arg3 / 2) * _arg1) * _arg1) + _arg2));
            };
            --_arg1;
            return ((((-(_arg3) / 2) * ((_arg1 * (_arg1 - 2)) - 1)) + _arg2));
        }
        public static function easeOutInQuad(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutQuad((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInQuad(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInCubic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            return (((((_arg3 * _arg1) * _arg1) * _arg1) + _arg2));
        }
        public static function easeOutCubic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((_arg1 * _arg1) * _arg1) + 1)) + _arg2));
        }
        public static function easeInOutCubic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((((_arg3 / 2) * _arg1) * _arg1) * _arg1) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((_arg3 / 2) * (((_arg1 * _arg1) * _arg1) + 2)) + _arg2));
        }
        public static function easeOutInCubic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutCubic((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInCubic(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInQuart(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            return ((((((_arg3 * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
        }
        public static function easeOutQuart(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((-(_arg3) * ((((_arg1 * _arg1) * _arg1) * _arg1) - 1)) + _arg2));
        }
        public static function easeInOutQuart(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return (((((((_arg3 / 2) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((-(_arg3) / 2) * ((((_arg1 * _arg1) * _arg1) * _arg1) - 2)) + _arg2));
        }
        public static function easeOutInQuart(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutQuart((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInQuart(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInQuint(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            return (((((((_arg3 * _arg1) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
        }
        public static function easeOutQuint(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 1)) + _arg2));
        }
        public static function easeInOutQuint(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((((((_arg3 / 2) * _arg1) * _arg1) * _arg1) * _arg1) * _arg1) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((_arg3 / 2) * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 2)) + _arg2));
        }
        public static function easeOutInQuint(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutQuint((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInQuint(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInSine(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return ((((-(_arg3) * Math.cos(((_arg1 / _arg4) * (Math.PI / 2)))) + _arg3) + _arg2));
        }
        public static function easeOutSine(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return (((_arg3 * Math.sin(((_arg1 / _arg4) * (Math.PI / 2)))) + _arg2));
        }
        public static function easeInOutSine(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return ((((-(_arg3) / 2) * (Math.cos(((Math.PI * _arg1) / _arg4)) - 1)) + _arg2));
        }
        public static function easeOutInSine(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutSine((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInSine(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInExpo(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return (((_arg1)==0) ? _arg2 : (((_arg3 * Math.pow(2, (10 * ((_arg1 / _arg4) - 1)))) + _arg2) - (_arg3 * 0.001)));
        }
        public static function easeOutExpo(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return (((_arg1)==_arg4) ? (_arg2 + _arg3) : (((_arg3 * 1.001) * (-(Math.pow(2, ((-10 * _arg1) / _arg4))) + 1)) + _arg2));
        }
        public static function easeInOutExpo(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 == 0){
                return (_arg2);
            };
            if (_arg1 == _arg4){
                return ((_arg2 + _arg3));
            };
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return (((((_arg3 / 2) * Math.pow(2, (10 * (_arg1 - 1)))) + _arg2) - (_arg3 * 0.0005)));
            };
            --_arg1;
            return (((((_arg3 / 2) * 1.0005) * (-(Math.pow(2, (-10 * _arg1))) + 2)) + _arg2));
        }
        public static function easeOutInExpo(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutExpo((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInExpo(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInCirc(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            return (((-(_arg3) * (Math.sqrt((1 - (_arg1 * _arg1))) - 1)) + _arg2));
        }
        public static function easeOutCirc(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * Math.sqrt((1 - (_arg1 * _arg1)))) + _arg2));
        }
        public static function easeInOutCirc(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((-(_arg3) / 2) * (Math.sqrt((1 - (_arg1 * _arg1))) - 1)) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((_arg3 / 2) * (Math.sqrt((1 - (_arg1 * _arg1))) + 1)) + _arg2));
        }
        public static function easeOutInCirc(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutCirc((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInCirc(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInElastic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            var _local7:Number;
            if (_arg1 == 0){
                return (_arg2);
            };
            _arg1 = (_arg1 / _arg4);
            if (_arg1 == 1){
                return ((_arg2 + _arg3));
            };
            var _local6:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.period)))) ? (_arg4 * 0.3) : _arg5.period);
            var _local8:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.amplitude)))) ? 0 : _arg5.amplitude);
            if (((!(Boolean(_local8))) || ((_local8 < Math.abs(_arg3))))){
                _local8 = _arg3;
                _local7 = (_local6 / 4);
            } else {
                _local7 = ((_local6 / (2 * Math.PI)) * Math.asin((_arg3 / _local8)));
            };
            --_arg1;
            return ((-(((_local8 * Math.pow(2, (10 * _arg1))) * Math.sin(((((_arg1 * _arg4) - _local7) * (2 * Math.PI)) / _local6)))) + _arg2));
        }
        public static function easeOutElastic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            var _local7:Number;
            if (_arg1 == 0){
                return (_arg2);
            };
            _arg1 = (_arg1 / _arg4);
            if (_arg1 == 1){
                return ((_arg2 + _arg3));
            };
            var _local6:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.period)))) ? (_arg4 * 0.3) : _arg5.period);
            var _local8:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.amplitude)))) ? 0 : _arg5.amplitude);
            if (((!(Boolean(_local8))) || ((_local8 < Math.abs(_arg3))))){
                _local8 = _arg3;
                _local7 = (_local6 / 4);
            } else {
                _local7 = ((_local6 / (2 * Math.PI)) * Math.asin((_arg3 / _local8)));
            };
            return (((((_local8 * Math.pow(2, (-10 * _arg1))) * Math.sin(((((_arg1 * _arg4) - _local7) * (2 * Math.PI)) / _local6))) + _arg3) + _arg2));
        }
        public static function easeInOutElastic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            var _local7:Number;
            if (_arg1 == 0){
                return (_arg2);
            };
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 == 2){
                return ((_arg2 + _arg3));
            };
            var _local6:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.period)))) ? (_arg4 * (0.3 * 1.5)) : _arg5.period);
            var _local8:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.amplitude)))) ? 0 : _arg5.amplitude);
            if (((!(Boolean(_local8))) || ((_local8 < Math.abs(_arg3))))){
                _local8 = _arg3;
                _local7 = (_local6 / 4);
            } else {
                _local7 = ((_local6 / (2 * Math.PI)) * Math.asin((_arg3 / _local8)));
            };
            if (_arg1 < 1){
                --_arg1;
                return (((-0.5 * ((_local8 * Math.pow(2, (10 * _arg1))) * Math.sin(((((_arg1 * _arg4) - _local7) * (2 * Math.PI)) / _local6)))) + _arg2));
            };
            --_arg1;
            return ((((((_local8 * Math.pow(2, (-10 * _arg1))) * Math.sin(((((_arg1 * _arg4) - _local7) * (2 * Math.PI)) / _local6))) * 0.5) + _arg3) + _arg2));
        }
        public static function easeOutInElastic(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutElastic((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInElastic(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInBack(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            var _local6:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.overshoot)))) ? 1.70158 : _arg5.overshoot);
            _arg1 = (_arg1 / _arg4);
            return (((((_arg3 * _arg1) * _arg1) * (((_local6 + 1) * _arg1) - _local6)) + _arg2));
        }
        public static function easeOutBack(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            var _local6:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.overshoot)))) ? 1.70158 : _arg5.overshoot);
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((_arg1 * _arg1) * (((_local6 + 1) * _arg1) + _local6)) + 1)) + _arg2));
        }
        public static function easeInOutBack(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            var _local6:Number = ((((!(Boolean(_arg5))) || (isNaN(_arg5.overshoot)))) ? 1.70158 : _arg5.overshoot);
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                _local6 = (_local6 * 1.525);
                return ((((_arg3 / 2) * ((_arg1 * _arg1) * (((_local6 + 1) * _arg1) - _local6))) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            _local6 = (_local6 * 1.525);
            return ((((_arg3 / 2) * (((_arg1 * _arg1) * (((_local6 + 1) * _arg1) + _local6)) + 2)) + _arg2));
        }
        public static function easeOutInBack(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutBack((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInBack(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }
        public static function easeInBounce(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            return (((_arg3 - easeOutBounce((_arg4 - _arg1), 0, _arg3, _arg4)) + _arg2));
        }
        public static function easeOutBounce(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            _arg1 = (_arg1 / _arg4);
            if (_arg1 < (1 / 2.75)){
                return (((_arg3 * ((7.5625 * _arg1) * _arg1)) + _arg2));
            };
            if (_arg1 < (2 / 2.75)){
                _arg1 = (_arg1 - (1.5 / 2.75));
                return (((_arg3 * (((7.5625 * _arg1) * _arg1) + 0.75)) + _arg2));
            };
            if (_arg1 < (2.5 / 2.75)){
                _arg1 = (_arg1 - (2.25 / 2.75));
                return (((_arg3 * (((7.5625 * _arg1) * _arg1) + 0.9375)) + _arg2));
            };
            _arg1 = (_arg1 - (2.625 / 2.75));
            return (((_arg3 * (((7.5625 * _arg1) * _arg1) + 0.984375)) + _arg2));
        }
        public static function easeInOutBounce(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (((easeInBounce((_arg1 * 2), 0, _arg3, _arg4) * 0.5) + _arg2));
            };
            return ((((easeOutBounce(((_arg1 * 2) - _arg4), 0, _arg3, _arg4) * 0.5) + (_arg3 * 0.5)) + _arg2));
        }
        public static function easeOutInBounce(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number, _arg5:Object=null):Number{
            if (_arg1 < (_arg4 / 2)){
                return (easeOutBounce((_arg1 * 2), _arg2, (_arg3 / 2), _arg4, _arg5));
            };
            return (easeInBounce(((_arg1 * 2) - _arg4), (_arg2 + (_arg3 / 2)), (_arg3 / 2), _arg4, _arg5));
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {

    public class SpecialPropertySplitter {

        public var parameters:Array;
        public var splitValues:Function;

        public function SpecialPropertySplitter(_arg1:Function, _arg2:Array){
            this.splitValues = _arg1;
            this.parameters = _arg2;
        }
        public function toString():String{
            var _local1 = "";
            _local1 = (_local1 + "[SpecialPropertySplitter ");
            _local1 = (_local1 + ("splitValues:" + String(this.splitValues)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("parameters:" + String(this.parameters)));
            _local1 = (_local1 + "]");
            return (_local1);
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {

    public class SpecialProperty {

        public var getValue:Function;
        public var setValue:Function;
        public var parameters:Array;
        public var preProcess:Function;

        public function SpecialProperty(_arg1:Function, _arg2:Function, _arg3:Array=null, _arg4:Function=null){
            this.getValue = _arg1;
            this.setValue = _arg2;
            this.parameters = _arg3;
            this.preProcess = _arg4;
        }
        public function toString():String{
            var _local1 = "";
            _local1 = (_local1 + "[SpecialProperty ");
            _local1 = (_local1 + ("getValue:" + String(this.getValue)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("setValue:" + String(this.setValue)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("parameters:" + String(this.parameters)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("preProcess:" + String(this.preProcess)));
            _local1 = (_local1 + "]");
            return (_local1);
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {

    public class SpecialPropertyModifier {

        public var modifyValues:Function;
        public var getValue:Function;

        public function SpecialPropertyModifier(_arg1:Function, _arg2:Function){
            this.modifyValues = _arg1;
            this.getValue = _arg2;
        }
        public function toString():String{
            var _local1 = "";
            _local1 = (_local1 + "[SpecialPropertyModifier ");
            _local1 = (_local1 + ("modifyValues:" + String(this.modifyValues)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("getValue:" + String(this.getValue)));
            _local1 = (_local1 + "]");
            return (_local1);
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;

    public class Tweener {

        private static var __tweener_controller__:MovieClip;
        private static var _engineExists:Boolean = false;
        private static var _inited:Boolean = false;
        private static var _currentTime:Number;
        private static var _currentTimeFrame:Number;
        private static var _tweenList:Array;
        private static var _timeScale:Number = 1;
        private static var _transitionList:Object;
        private static var _specialPropertyList:Object;
        private static var _specialPropertyModifierList:Object;
        private static var _specialPropertySplitterList:Object;
        public static var autoOverwrite:Boolean = true;

        public function Tweener(){
            trace("Tweener is a static class and should not be instantiated.");
        }
        public static function addTween(_arg1:Object=null, _arg2:Object=null):Boolean{
            var _local3:Number;
            var _local4:Number;
            var _local5:String;
            var _local6:Array;
            var _local13:Function;
            var _local14:Object;
            var _local15:TweenListObj;
            var _local16:Number;
            var _local17:Array;
            var _local18:Array;
            var _local19:Array;
            var _local20:String;
            if (!Boolean(_arg1)){
                return (false);
            };
            if ((_arg1 is Array)){
                _local6 = _arg1.concat();
            } else {
                _local6 = [_arg1];
            };
            var _local7:Object = TweenListObj.makePropertiesChain(_arg2);
            if (!_inited){
                init();
            };
            if (((!(_engineExists)) || (!(Boolean(__tweener_controller__))))){
                startEngine();
            };
            var _local8:Number = ((isNaN(_local7.time)) ? 0 : _local7.time);
            var _local9:Number = ((isNaN(_local7.delay)) ? 0 : _local7.delay);
            var _local10:Array = new Array();
            var _local11:Object = {
                overwrite:true,
                time:true,
                delay:true,
                useFrames:true,
                skipUpdates:true,
                transition:true,
                transitionParams:true,
                onStart:true,
                onUpdate:true,
                onComplete:true,
                onOverwrite:true,
                onError:true,
                rounded:true,
                onStartParams:true,
                onUpdateParams:true,
                onCompleteParams:true,
                onOverwriteParams:true,
                onStartScope:true,
                onUpdateScope:true,
                onCompleteScope:true,
                onOverwriteScope:true,
                onErrorScope:true
            };
            var _local12:Object = new Object();
            for (_local5 in _local7) {
                if (!_local11[_local5]){
                    if (_specialPropertySplitterList[_local5]){
                        _local17 = _specialPropertySplitterList[_local5].splitValues(_local7[_local5], _specialPropertySplitterList[_local5].parameters);
                        _local3 = 0;
                        while (_local3 < _local17.length) {
                            if (_specialPropertySplitterList[_local17[_local3].name]){
                                _local18 = _specialPropertySplitterList[_local17[_local3].name].splitValues(_local17[_local3].value, _specialPropertySplitterList[_local17[_local3].name].parameters);
                                _local4 = 0;
                                while (_local4 < _local18.length) {
                                    _local10[_local18[_local4].name] = {
                                        valueStart:undefined,
                                        valueComplete:_local18[_local4].value,
                                        arrayIndex:_local18[_local4].arrayIndex,
                                        isSpecialProperty:false
                                    };
                                    _local4++;
                                };
                            } else {
                                _local10[_local17[_local3].name] = {
                                    valueStart:undefined,
                                    valueComplete:_local17[_local3].value,
                                    arrayIndex:_local17[_local3].arrayIndex,
                                    isSpecialProperty:false
                                };
                            };
                            _local3++;
                        };
                    } else {
                        if (_specialPropertyModifierList[_local5] != undefined){
                            _local19 = _specialPropertyModifierList[_local5].modifyValues(_local7[_local5]);
                            _local3 = 0;
                            while (_local3 < _local19.length) {
                                _local12[_local19[_local3].name] = {
                                    modifierParameters:_local19[_local3].parameters,
                                    modifierFunction:_specialPropertyModifierList[_local5].getValue
                                };
                                _local3++;
                            };
                        } else {
                            _local10[_local5] = {
                                valueStart:undefined,
                                valueComplete:_local7[_local5]
                            };
                        };
                    };
                };
            };
            for (_local5 in _local10) {
                if (_specialPropertyList[_local5] != undefined){
                    _local10[_local5].isSpecialProperty = true;
                } else {
                    if (_local6[0][_local5] == undefined){
                        printError((((("The property '" + _local5) + "' doesn't seem to be a normal object property of ") + String(_local6[0])) + " or a registered special property."));
                    };
                };
            };
            for (_local5 in _local12) {
                if (_local10[_local5] != undefined){
                    _local10[_local5].modifierParameters = _local12[_local5].modifierParameters;
                    _local10[_local5].modifierFunction = _local12[_local5].modifierFunction;
                };
            };
            if (typeof(_local7.transition) == "string"){
                _local20 = _local7.transition.toLowerCase();
                _local13 = _transitionList[_local20];
            } else {
                _local13 = _local7.transition;
            };
            if (!Boolean(_local13)){
                _local13 = _transitionList["easeoutexpo"];
            };
            _local3 = 0;
            while (_local3 < _local6.length) {
                _local14 = new Object();
                for (_local5 in _local10) {
                    _local14[_local5] = new PropertyInfoObj(_local10[_local5].valueStart, _local10[_local5].valueComplete, _local10[_local5].valueComplete, _local10[_local5].arrayIndex, {}, _local10[_local5].isSpecialProperty, _local10[_local5].modifierFunction, _local10[_local5].modifierParameters);
                };
                if (_local7.useFrames == true){
                    _local15 = new TweenListObj(_local6[_local3], (_currentTimeFrame + (_local9 / _timeScale)), (_currentTimeFrame + ((_local9 + _local8) / _timeScale)), true, _local13, _local7.transitionParams);
                } else {
                    _local15 = new TweenListObj(_local6[_local3], (_currentTime + ((_local9 * 1000) / _timeScale)), (_currentTime + (((_local9 * 1000) + (_local8 * 1000)) / _timeScale)), false, _local13, _local7.transitionParams);
                };
                _local15.properties = _local14;
                _local15.onStart = _local7.onStart;
                _local15.onUpdate = _local7.onUpdate;
                _local15.onComplete = _local7.onComplete;
                _local15.onOverwrite = _local7.onOverwrite;
                _local15.onError = _local7.onError;
                _local15.onStartParams = _local7.onStartParams;
                _local15.onUpdateParams = _local7.onUpdateParams;
                _local15.onCompleteParams = _local7.onCompleteParams;
                _local15.onOverwriteParams = _local7.onOverwriteParams;
                _local15.onStartScope = _local7.onStartScope;
                _local15.onUpdateScope = _local7.onUpdateScope;
                _local15.onCompleteScope = _local7.onCompleteScope;
                _local15.onOverwriteScope = _local7.onOverwriteScope;
                _local15.onErrorScope = _local7.onErrorScope;
                _local15.rounded = _local7.rounded;
                _local15.skipUpdates = _local7.skipUpdates;
                if ((((_local7.overwrite == undefined)) ? autoOverwrite : _local7.overwrite)){
                    removeTweensByTime(_local15.scope, _local15.properties, _local15.timeStart, _local15.timeComplete);
                };
                _tweenList.push(_local15);
                if ((((_local8 == 0)) && ((_local9 == 0)))){
                    _local16 = (_tweenList.length - 1);
                    updateTweenByIndex(_local16);
                    removeTweenByIndex(_local16);
                };
                _local3++;
            };
            return (true);
        }
        public static function addCaller(_arg1:Object=null, _arg2:Object=null):Boolean{
            var _local3:Number;
            var _local4:Array;
            var _local8:Function;
            var _local9:TweenListObj;
            var _local10:Number;
            var _local11:String;
            if (!Boolean(_arg1)){
                return (false);
            };
            if ((_arg1 is Array)){
                _local4 = _arg1.concat();
            } else {
                _local4 = [_arg1];
            };
            var _local5:Object = _arg2;
            if (!_inited){
                init();
            };
            if (((!(_engineExists)) || (!(Boolean(__tweener_controller__))))){
                startEngine();
            };
            var _local6:Number = ((isNaN(_local5.time)) ? 0 : _local5.time);
            var _local7:Number = ((isNaN(_local5.delay)) ? 0 : _local5.delay);
            if (typeof(_local5.transition) == "string"){
                _local11 = _local5.transition.toLowerCase();
                _local8 = _transitionList[_local11];
            } else {
                _local8 = _local5.transition;
            };
            if (!Boolean(_local8)){
                _local8 = _transitionList["easeoutexpo"];
            };
            _local3 = 0;
            while (_local3 < _local4.length) {
                if (_local5.useFrames == true){
                    _local9 = new TweenListObj(_local4[_local3], (_currentTimeFrame + (_local7 / _timeScale)), (_currentTimeFrame + ((_local7 + _local6) / _timeScale)), true, _local8, _local5.transitionParams);
                } else {
                    _local9 = new TweenListObj(_local4[_local3], (_currentTime + ((_local7 * 1000) / _timeScale)), (_currentTime + (((_local7 * 1000) + (_local6 * 1000)) / _timeScale)), false, _local8, _local5.transitionParams);
                };
                _local9.properties = null;
                _local9.onStart = _local5.onStart;
                _local9.onUpdate = _local5.onUpdate;
                _local9.onComplete = _local5.onComplete;
                _local9.onOverwrite = _local5.onOverwrite;
                _local9.onStartParams = _local5.onStartParams;
                _local9.onUpdateParams = _local5.onUpdateParams;
                _local9.onCompleteParams = _local5.onCompleteParams;
                _local9.onOverwriteParams = _local5.onOverwriteParams;
                _local9.onStartScope = _local5.onStartScope;
                _local9.onUpdateScope = _local5.onUpdateScope;
                _local9.onCompleteScope = _local5.onCompleteScope;
                _local9.onOverwriteScope = _local5.onOverwriteScope;
                _local9.onErrorScope = _local5.onErrorScope;
                _local9.isCaller = true;
                _local9.count = _local5.count;
                _local9.waitFrames = _local5.waitFrames;
                _tweenList.push(_local9);
                if ((((_local6 == 0)) && ((_local7 == 0)))){
                    _local10 = (_tweenList.length - 1);
                    updateTweenByIndex(_local10);
                    removeTweenByIndex(_local10);
                };
                _local3++;
            };
            return (true);
        }
        public static function removeTweensByTime(_arg1:Object, _arg2:Object, _arg3:Number, _arg4:Number):Boolean{
            var removedLocally:* = false;
            var i:* = 0;
            var pName:* = null;
            var eventScope:* = null;
            var p_scope:* = _arg1;
            var p_properties:* = _arg2;
            var p_timeStart:* = _arg3;
            var p_timeComplete:* = _arg4;
            var removed:* = false;
            var tl:* = _tweenList.length;
            i = 0;
            while (i < tl) {
                if (((Boolean(_tweenList[i])) && ((p_scope == _tweenList[i].scope)))){
                    if ((((p_timeComplete > _tweenList[i].timeStart)) && ((p_timeStart < _tweenList[i].timeComplete)))){
                        removedLocally = false;
                        for (pName in _tweenList[i].properties) {
                            if (Boolean(p_properties[pName])){
                                if (Boolean(_tweenList[i].onOverwrite)){
                                    eventScope = ((Boolean(_tweenList[i].onOverwriteScope)) ? _tweenList[i].onOverwriteScope : _tweenList[i].scope);
                                    try {
                                        _tweenList[i].onOverwrite.apply(eventScope, _tweenList[i].onOverwriteParams);
                                    } catch(e:Error) {
                                        handleError(_tweenList[i], e, "onOverwrite");
                                    };
                                };
                                _tweenList[i].properties[pName] = undefined;
                                delete _tweenList[i].properties[pName];
                                removedLocally = true;
                                removed = true;
                            };
                        };
                        if (removedLocally){
                            if (AuxFunctions.getObjectLength(_tweenList[i].properties) == 0){
                                removeTweenByIndex(i);
                            };
                        };
                    };
                };
                i = (i + 1);
            };
            return (removed);
        }
        public static function removeTweens(_arg1:Object, ... _args):Boolean{
            var _local4:uint;
            var _local5:SpecialPropertySplitter;
            var _local6:Array;
            var _local7:uint;
            var _local3:Array = new Array();
            _local4 = 0;
            while (_local4 < _args.length) {
                if ((((typeof(_args[_local4]) == "string")) && ((_local3.indexOf(_args[_local4]) == -1)))){
                    if (_specialPropertySplitterList[_args[_local4]]){
                        _local5 = _specialPropertySplitterList[_args[_local4]];
                        _local6 = _local5.splitValues(_arg1, null);
                        _local7 = 0;
                        while (_local7 < _local6.length) {
                            _local3.push(_local6[_local7].name);
                            _local7++;
                        };
                    } else {
                        _local3.push(_args[_local4]);
                    };
                };
                _local4++;
            };
            return (affectTweens(removeTweenByIndex, _arg1, _local3));
        }
        public static function removeAllTweens():Boolean{
            var _local2:uint;
            if (!Boolean(_tweenList)){
                return (false);
            };
            var _local1:Boolean;
            _local2 = 0;
            while (_local2 < _tweenList.length) {
                removeTweenByIndex(_local2);
                _local1 = true;
                _local2++;
            };
            return (_local1);
        }
        public static function pauseTweens(_arg1:Object, ... _args):Boolean{
            var _local4:uint;
            var _local3:Array = new Array();
            _local4 = 0;
            while (_local4 < _args.length) {
                if ((((typeof(_args[_local4]) == "string")) && ((_local3.indexOf(_args[_local4]) == -1)))){
                    _local3.push(_args[_local4]);
                };
                _local4++;
            };
            return (affectTweens(pauseTweenByIndex, _arg1, _local3));
        }
        public static function pauseAllTweens():Boolean{
            var _local2:uint;
            if (!Boolean(_tweenList)){
                return (false);
            };
            var _local1:Boolean;
            _local2 = 0;
            while (_local2 < _tweenList.length) {
                pauseTweenByIndex(_local2);
                _local1 = true;
                _local2++;
            };
            return (_local1);
        }
        public static function resumeTweens(_arg1:Object, ... _args):Boolean{
            var _local4:uint;
            var _local3:Array = new Array();
            _local4 = 0;
            while (_local4 < _args.length) {
                if ((((typeof(_args[_local4]) == "string")) && ((_local3.indexOf(_args[_local4]) == -1)))){
                    _local3.push(_args[_local4]);
                };
                _local4++;
            };
            return (affectTweens(resumeTweenByIndex, _arg1, _local3));
        }
        public static function resumeAllTweens():Boolean{
            var _local2:uint;
            if (!Boolean(_tweenList)){
                return (false);
            };
            var _local1:Boolean;
            _local2 = 0;
            while (_local2 < _tweenList.length) {
                resumeTweenByIndex(_local2);
                _local1 = true;
                _local2++;
            };
            return (_local1);
        }
        private static function affectTweens(_arg1:Function, _arg2:Object, _arg3:Array):Boolean{
            var _local5:uint;
            var _local6:Array;
            var _local7:uint;
            var _local8:uint;
            var _local9:uint;
            var _local4:Boolean;
            if (!Boolean(_tweenList)){
                return (false);
            };
            _local5 = 0;
            while (_local5 < _tweenList.length) {
                if (((_tweenList[_local5]) && ((_tweenList[_local5].scope == _arg2)))){
                    if (_arg3.length == 0){
                        _arg1(_local5);
                        _local4 = true;
                    } else {
                        _local6 = new Array();
                        _local7 = 0;
                        while (_local7 < _arg3.length) {
                            if (Boolean(_tweenList[_local5].properties[_arg3[_local7]])){
                                _local6.push(_arg3[_local7]);
                            };
                            _local7++;
                        };
                        if (_local6.length > 0){
                            _local8 = AuxFunctions.getObjectLength(_tweenList[_local5].properties);
                            if (_local8 == _local6.length){
                                _arg1(_local5);
                                _local4 = true;
                            } else {
                                _local9 = splitTweens(_local5, _local6);
                                _arg1(_local9);
                                _local4 = true;
                            };
                        };
                    };
                };
                _local5++;
            };
            return (_local4);
        }
        public static function splitTweens(_arg1:Number, _arg2:Array):uint{
            var _local5:uint;
            var _local6:String;
            var _local7:Boolean;
            var _local3:TweenListObj = _tweenList[_arg1];
            var _local4:TweenListObj = _local3.clone(false);
            _local5 = 0;
            while (_local5 < _arg2.length) {
                _local6 = _arg2[_local5];
                if (Boolean(_local3.properties[_local6])){
                    _local3.properties[_local6] = undefined;
                    delete _local3.properties[_local6];
                };
                _local5++;
            };
            for (_local6 in _local4.properties) {
                _local7 = false;
                _local5 = 0;
                while (_local5 < _arg2.length) {
                    if (_arg2[_local5] == _local6){
                        _local7 = true;
                        break;
                    };
                    _local5++;
                };
                if (!_local7){
                    _local4.properties[_local6] = undefined;
                    delete _local4.properties[_local6];
                };
            };
            _tweenList.push(_local4);
            return ((_tweenList.length - 1));
        }
        private static function updateTweens():Boolean{
            var _local1:int;
            if (_tweenList.length == 0){
                return (false);
            };
            _local1 = 0;
            while (_local1 < _tweenList.length) {
                if ((((_tweenList[_local1] == undefined)) || (!(_tweenList[_local1].isPaused)))){
                    if (!updateTweenByIndex(_local1)){
                        removeTweenByIndex(_local1);
                    };
                    if (_tweenList[_local1] == null){
                        removeTweenByIndex(_local1, true);
                        _local1--;
                    };
                };
                _local1++;
            };
            return (true);
        }
        public static function removeTweenByIndex(_arg1:Number, _arg2:Boolean=false):Boolean{
            _tweenList[_arg1] = null;
            if (_arg2){
                _tweenList.splice(_arg1, 1);
            };
            return (true);
        }
        public static function pauseTweenByIndex(_arg1:Number):Boolean{
            var _local2:TweenListObj = _tweenList[_arg1];
            if ((((_local2 == null)) || (_local2.isPaused))){
                return (false);
            };
            _local2.timePaused = getCurrentTweeningTime(_local2);
            _local2.isPaused = true;
            return (true);
        }
        public static function resumeTweenByIndex(_arg1:Number):Boolean{
            var _local2:TweenListObj = _tweenList[_arg1];
            if ((((_local2 == null)) || (!(_local2.isPaused)))){
                return (false);
            };
            var _local3:Number = getCurrentTweeningTime(_local2);
            _local2.timeStart = (_local2.timeStart + (_local3 - _local2.timePaused));
            _local2.timeComplete = (_local2.timeComplete + (_local3 - _local2.timePaused));
            _local2.timePaused = undefined;
            _local2.isPaused = false;
            return (true);
        }
        private static function updateTweenByIndex(_arg1:Number):Boolean{
            var tTweening:* = null;
            var mustUpdate:* = false;
            var nv:* = NaN;
            var t:* = NaN;
            var b:* = NaN;
            var c:* = NaN;
            var d:* = NaN;
            var pName:* = null;
            var eventScope:* = null;
            var tScope:* = null;
            var tProperty:* = null;
            var pv:* = NaN;
            var i:* = _arg1;
            tTweening = _tweenList[i];
            if ((((tTweening == null)) || (!(Boolean(tTweening.scope))))){
                return (false);
            };
            var isOver:* = false;
            var cTime:* = getCurrentTweeningTime(tTweening);
            if (cTime >= tTweening.timeStart){
                tScope = tTweening.scope;
                if (tTweening.isCaller){
                    do  {
                        t = (((tTweening.timeComplete - tTweening.timeStart) / tTweening.count) * (tTweening.timesCalled + 1));
                        b = tTweening.timeStart;
                        c = (tTweening.timeComplete - tTweening.timeStart);
                        d = (tTweening.timeComplete - tTweening.timeStart);
                        nv = tTweening.transition(t, b, c, d);
                        if (cTime >= nv){
                            if (Boolean(tTweening.onUpdate)){
                                eventScope = ((Boolean(tTweening.onUpdateScope)) ? tTweening.onUpdateScope : tScope);
                                try {
                                    tTweening.onUpdate.apply(eventScope, tTweening.onUpdateParams);
                                } catch(e1:Error) {
                                    handleError(tTweening, e1, "onUpdate");
                                };
                            };
                            tTweening.timesCalled++;
                            if (tTweening.timesCalled >= tTweening.count){
                                isOver = true;
                                break;
                            };
                            if (tTweening.waitFrames){
                                break;
                            };
                        };
                    } while (cTime >= nv);
                } else {
                    mustUpdate = (((((tTweening.skipUpdates < 1)) || (!(tTweening.skipUpdates)))) || ((tTweening.updatesSkipped >= tTweening.skipUpdates)));
                    if (cTime >= tTweening.timeComplete){
                        isOver = true;
                        mustUpdate = true;
                    };
                    if (!tTweening.hasStarted){
                        if (Boolean(tTweening.onStart)){
                            eventScope = ((Boolean(tTweening.onStartScope)) ? tTweening.onStartScope : tScope);
                            try {
                                tTweening.onStart.apply(eventScope, tTweening.onStartParams);
                            } catch(e2:Error) {
                                handleError(tTweening, e2, "onStart");
                            };
                        };
                        for (pName in tTweening.properties) {
                            if (tTweening.properties[pName].isSpecialProperty){
                                if (Boolean(_specialPropertyList[pName].preProcess)){
                                    tTweening.properties[pName].valueComplete = _specialPropertyList[pName].preProcess(tScope, _specialPropertyList[pName].parameters, tTweening.properties[pName].originalValueComplete, tTweening.properties[pName].extra);
                                };
                                pv = _specialPropertyList[pName].getValue(tScope, _specialPropertyList[pName].parameters, tTweening.properties[pName].extra);
                            } else {
                                pv = tScope[pName];
                            };
                            tTweening.properties[pName].valueStart = ((isNaN(pv)) ? tTweening.properties[pName].valueComplete : pv);
                        };
                        mustUpdate = true;
                        tTweening.hasStarted = true;
                    };
                    if (mustUpdate){
                        for (pName in tTweening.properties) {
                            tProperty = tTweening.properties[pName];
                            if (isOver){
                                nv = tProperty.valueComplete;
                            } else {
                                if (tProperty.hasModifier){
                                    t = (cTime - tTweening.timeStart);
                                    d = (tTweening.timeComplete - tTweening.timeStart);
                                    nv = tTweening.transition(t, 0, 1, d, tTweening.transitionParams);
                                    nv = tProperty.modifierFunction(tProperty.valueStart, tProperty.valueComplete, nv, tProperty.modifierParameters);
                                } else {
                                    t = (cTime - tTweening.timeStart);
                                    b = tProperty.valueStart;
                                    c = (tProperty.valueComplete - tProperty.valueStart);
                                    d = (tTweening.timeComplete - tTweening.timeStart);
                                    nv = tTweening.transition(t, b, c, d, tTweening.transitionParams);
                                };
                            };
                            if (tTweening.rounded){
                                nv = Math.round(nv);
                            };
                            if (tProperty.isSpecialProperty){
                                _specialPropertyList[pName].setValue(tScope, nv, _specialPropertyList[pName].parameters, tTweening.properties[pName].extra);
                            } else {
                                tScope[pName] = nv;
                            };
                        };
                        tTweening.updatesSkipped = 0;
                        if (Boolean(tTweening.onUpdate)){
                            eventScope = ((Boolean(tTweening.onUpdateScope)) ? tTweening.onUpdateScope : tScope);
                            try {
                                tTweening.onUpdate.apply(eventScope, tTweening.onUpdateParams);
                            } catch(e3:Error) {
                                handleError(tTweening, e3, "onUpdate");
                            };
                        };
                    } else {
                        tTweening.updatesSkipped++;
                    };
                };
                if (((isOver) && (Boolean(tTweening.onComplete)))){
                    eventScope = ((Boolean(tTweening.onCompleteScope)) ? tTweening.onCompleteScope : tScope);
                    try {
                        tTweening.onComplete.apply(eventScope, tTweening.onCompleteParams);
                    } catch(e4:Error) {
                        handleError(tTweening, e4, "onComplete");
                    };
                };
                return (!(isOver));
            };
            return (true);
        }
        public static function init(... _args):void{
            _inited = true;
            _transitionList = new Object();
            Equations.init();
            _specialPropertyList = new Object();
            _specialPropertyModifierList = new Object();
            _specialPropertySplitterList = new Object();
        }
        public static function registerTransition(_arg1:String, _arg2:Function):void{
            if (!_inited){
                init();
            };
            _transitionList[_arg1] = _arg2;
        }
        public static function registerSpecialProperty(_arg1:String, _arg2:Function, _arg3:Function, _arg4:Array=null, _arg5:Function=null):void{
            if (!_inited){
                init();
            };
            var _local6:SpecialProperty = new SpecialProperty(_arg2, _arg3, _arg4, _arg5);
            _specialPropertyList[_arg1] = _local6;
        }
        public static function registerSpecialPropertyModifier(_arg1:String, _arg2:Function, _arg3:Function):void{
            if (!_inited){
                init();
            };
            var _local4:SpecialPropertyModifier = new SpecialPropertyModifier(_arg2, _arg3);
            _specialPropertyModifierList[_arg1] = _local4;
        }
        public static function registerSpecialPropertySplitter(_arg1:String, _arg2:Function, _arg3:Array=null):void{
            if (!_inited){
                init();
            };
            var _local4:SpecialPropertySplitter = new SpecialPropertySplitter(_arg2, _arg3);
            _specialPropertySplitterList[_arg1] = _local4;
        }
        private static function startEngine():void{
            _engineExists = true;
            _tweenList = new Array();
            __tweener_controller__ = new MovieClip();
            __tweener_controller__.addEventListener(Event.ENTER_FRAME, Tweener.onEnterFrame);
            _currentTimeFrame = 0;
            updateTime();
        }
        private static function stopEngine():void{
            _engineExists = false;
            _tweenList = null;
            _currentTime = 0;
            _currentTimeFrame = 0;
            __tweener_controller__.removeEventListener(Event.ENTER_FRAME, Tweener.onEnterFrame);
            __tweener_controller__ = null;
        }
        public static function updateTime():void{
            _currentTime = getTimer();
        }
        public static function updateFrame():void{
            _currentTimeFrame++;
        }
        public static function onEnterFrame(_arg1:Event):void{
            updateTime();
            updateFrame();
            var _local2:Boolean;
            _local2 = updateTweens();
            if (!_local2){
                stopEngine();
            };
        }
        public static function setTimeScale(_arg1:Number):void{
            var _local2:Number;
            var _local3:Number;
            if (isNaN(_arg1)){
                _arg1 = 1;
            };
            if (_arg1 < 1E-5){
                _arg1 = 1E-5;
            };
            if (_arg1 != _timeScale){
                if (_tweenList != null){
                    _local2 = 0;
                    while (_local2 < _tweenList.length) {
                        _local3 = getCurrentTweeningTime(_tweenList[_local2]);
                        _tweenList[_local2].timeStart = (_local3 - (((_local3 - _tweenList[_local2].timeStart) * _timeScale) / _arg1));
                        _tweenList[_local2].timeComplete = (_local3 - (((_local3 - _tweenList[_local2].timeComplete) * _timeScale) / _arg1));
                        if (_tweenList[_local2].timePaused != undefined){
                            _tweenList[_local2].timePaused = (_local3 - (((_local3 - _tweenList[_local2].timePaused) * _timeScale) / _arg1));
                        };
                        _local2++;
                    };
                };
                _timeScale = _arg1;
            };
        }
        public static function isTweening(_arg1:Object):Boolean{
            var _local2:uint;
            if (!Boolean(_tweenList)){
                return (false);
            };
            _local2 = 0;
            while (_local2 < _tweenList.length) {
                if (((Boolean(_tweenList[_local2])) && ((_tweenList[_local2].scope == _arg1)))){
                    return (true);
                };
                _local2++;
            };
            return (false);
        }
        public static function getTweens(_arg1:Object):Array{
            var _local2:uint;
            var _local3:String;
            if (!Boolean(_tweenList)){
                return ([]);
            };
            var _local4:Array = new Array();
            _local2 = 0;
            while (_local2 < _tweenList.length) {
                if (((Boolean(_tweenList[_local2])) && ((_tweenList[_local2].scope == _arg1)))){
                    for (_local3 in _tweenList[_local2].properties) {
                        _local4.push(_local3);
                    };
                };
                _local2++;
            };
            return (_local4);
        }
        public static function getTweenCount(_arg1:Object):Number{
            var _local2:uint;
            if (!Boolean(_tweenList)){
                return (0);
            };
            var _local3:Number = 0;
            _local2 = 0;
            while (_local2 < _tweenList.length) {
                if (((Boolean(_tweenList[_local2])) && ((_tweenList[_local2].scope == _arg1)))){
                    _local3 = (_local3 + AuxFunctions.getObjectLength(_tweenList[_local2].properties));
                };
                _local2++;
            };
            return (_local3);
        }
        private static function handleError(_arg1:TweenListObj, _arg2:Error, _arg3:String):void{
            var eventScope:* = null;
            var pTweening:* = _arg1;
            var pError:* = _arg2;
            var pCallBackName:* = _arg3;
            if (((Boolean(pTweening.onError)) && ((pTweening.onError is Function)))){
                eventScope = ((Boolean(pTweening.onErrorScope)) ? pTweening.onErrorScope : pTweening.scope);
                try {
                    pTweening.onError.apply(eventScope, [pTweening.scope, pError]);
                } catch(metaError:Error) {
                    printError(((((String(pTweening.scope) + " raised an error while executing the 'onError' handler. Original error:\n ") + pError.getStackTrace()) + "\nonError error: ") + metaError.getStackTrace()));
                };
            } else {
                if (!Boolean(pTweening.onError)){
                    printError(((((String(pTweening.scope) + " raised an error while executing the '") + pCallBackName) + "'handler. \n") + pError.getStackTrace()));
                };
            };
        }
        public static function getCurrentTweeningTime(_arg1:Object):Number{
            return (((_arg1.useFrames) ? _currentTimeFrame : _currentTime));
        }
        public static function getVersion():String{
            return ("AS3 1.33.74");
        }
        public static function printError(_arg1:String):void{
            trace(("## [Tweener] Error: " + _arg1));
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {

    public class TweenListObj {

        public var scope:Object;
        public var properties:Object;
        public var timeStart:Number;
        public var timeComplete:Number;
        public var useFrames:Boolean;
        public var transition:Function;
        public var transitionParams:Object;
        public var onStart:Function;
        public var onUpdate:Function;
        public var onComplete:Function;
        public var onOverwrite:Function;
        public var onError:Function;
        public var onStartParams:Array;
        public var onUpdateParams:Array;
        public var onCompleteParams:Array;
        public var onOverwriteParams:Array;
        public var onStartScope:Object;
        public var onUpdateScope:Object;
        public var onCompleteScope:Object;
        public var onOverwriteScope:Object;
        public var onErrorScope:Object;
        public var rounded:Boolean;
        public var isPaused:Boolean;
        public var timePaused:Number;
        public var isCaller:Boolean;
        public var count:Number;
        public var timesCalled:Number;
        public var waitFrames:Boolean;
        public var skipUpdates:Number;
        public var updatesSkipped:Number;
        public var hasStarted:Boolean;

        public function TweenListObj(_arg1:Object, _arg2:Number, _arg3:Number, _arg4:Boolean, _arg5:Function, _arg6:Object){
            this.scope = _arg1;
            this.timeStart = _arg2;
            this.timeComplete = _arg3;
            this.useFrames = _arg4;
            this.transition = _arg5;
            this.transitionParams = _arg6;
            this.properties = new Object();
            this.isPaused = false;
            this.timePaused = undefined;
            this.isCaller = false;
            this.updatesSkipped = 0;
            this.timesCalled = 0;
            this.skipUpdates = 0;
            this.hasStarted = false;
        }
        public static function makePropertiesChain(_arg1:Object):Object{
            var _local3:Object;
            var _local4:Object;
            var _local5:Object;
            var _local6:Number;
            var _local7:Number;
            var _local8:Number;
            var _local2:Object = _arg1.base;
            if (_local2){
                _local3 = {};
                if ((_local2 is Array)){
                    _local4 = [];
                    _local8 = 0;
                    while (_local8 < _local2.length) {
                        _local4.push(_local2[_local8]);
                        _local8++;
                    };
                } else {
                    _local4 = [_local2];
                };
                _local4.push(_arg1);
                _local6 = _local4.length;
                _local7 = 0;
                while (_local7 < _local6) {
                    if (_local4[_local7]["base"]){
                        _local5 = AuxFunctions.concatObjects(makePropertiesChain(_local4[_local7]["base"]), _local4[_local7]);
                    } else {
                        _local5 = _local4[_local7];
                    };
                    _local3 = AuxFunctions.concatObjects(_local3, _local5);
                    _local7++;
                };
                if (_local3["base"]){
                    delete _local3["base"];
                };
                return (_local3);
            };
            return (_arg1);
        }

        public function clone(_arg1:Boolean):TweenListObj{
            var _local3:String;
            var _local2:TweenListObj = new TweenListObj(this.scope, this.timeStart, this.timeComplete, this.useFrames, this.transition, this.transitionParams);
            _local2.properties = new Array();
            for (_local3 in this.properties) {
                _local2.properties[_local3] = this.properties[_local3].clone();
            };
            _local2.skipUpdates = this.skipUpdates;
            _local2.updatesSkipped = this.updatesSkipped;
            if (!_arg1){
                _local2.onStart = this.onStart;
                _local2.onUpdate = this.onUpdate;
                _local2.onComplete = this.onComplete;
                _local2.onOverwrite = this.onOverwrite;
                _local2.onError = this.onError;
                _local2.onStartParams = this.onStartParams;
                _local2.onUpdateParams = this.onUpdateParams;
                _local2.onCompleteParams = this.onCompleteParams;
                _local2.onOverwriteParams = this.onOverwriteParams;
                _local2.onStartScope = this.onStartScope;
                _local2.onUpdateScope = this.onUpdateScope;
                _local2.onCompleteScope = this.onCompleteScope;
                _local2.onOverwriteScope = this.onOverwriteScope;
                _local2.onErrorScope = this.onErrorScope;
            };
            _local2.rounded = this.rounded;
            _local2.isPaused = this.isPaused;
            _local2.timePaused = this.timePaused;
            _local2.isCaller = this.isCaller;
            _local2.count = this.count;
            _local2.timesCalled = this.timesCalled;
            _local2.waitFrames = this.waitFrames;
            _local2.hasStarted = this.hasStarted;
            return (_local2);
        }
        public function toString():String{
            var _local3:String;
            var _local1 = "\n[TweenListObj ";
            _local1 = (_local1 + ("scope:" + String(this.scope)));
            _local1 = (_local1 + ", properties:");
            var _local2:Boolean;
            for (_local3 in this.properties) {
                if (!_local2){
                    _local1 = (_local1 + ",");
                };
                _local1 = (_local1 + ("[name:" + this.properties[_local3].name));
                _local1 = (_local1 + (",valueStart:" + this.properties[_local3].valueStart));
                _local1 = (_local1 + (",valueComplete:" + this.properties[_local3].valueComplete));
                _local1 = (_local1 + "]");
                _local2 = false;
            };
            _local1 = (_local1 + (", timeStart:" + String(this.timeStart)));
            _local1 = (_local1 + (", timeComplete:" + String(this.timeComplete)));
            _local1 = (_local1 + (", useFrames:" + String(this.useFrames)));
            _local1 = (_local1 + (", transition:" + String(this.transition)));
            _local1 = (_local1 + (", transitionParams:" + String(this.transitionParams)));
            if (this.skipUpdates){
                _local1 = (_local1 + (", skipUpdates:" + String(this.skipUpdates)));
            };
            if (this.updatesSkipped){
                _local1 = (_local1 + (", updatesSkipped:" + String(this.updatesSkipped)));
            };
            if (Boolean(this.onStart)){
                _local1 = (_local1 + (", onStart:" + String(this.onStart)));
            };
            if (Boolean(this.onUpdate)){
                _local1 = (_local1 + (", onUpdate:" + String(this.onUpdate)));
            };
            if (Boolean(this.onComplete)){
                _local1 = (_local1 + (", onComplete:" + String(this.onComplete)));
            };
            if (Boolean(this.onOverwrite)){
                _local1 = (_local1 + (", onOverwrite:" + String(this.onOverwrite)));
            };
            if (Boolean(this.onError)){
                _local1 = (_local1 + (", onError:" + String(this.onError)));
            };
            if (this.onStartParams){
                _local1 = (_local1 + (", onStartParams:" + String(this.onStartParams)));
            };
            if (this.onUpdateParams){
                _local1 = (_local1 + (", onUpdateParams:" + String(this.onUpdateParams)));
            };
            if (this.onCompleteParams){
                _local1 = (_local1 + (", onCompleteParams:" + String(this.onCompleteParams)));
            };
            if (this.onOverwriteParams){
                _local1 = (_local1 + (", onOverwriteParams:" + String(this.onOverwriteParams)));
            };
            if (this.onStartScope){
                _local1 = (_local1 + (", onStartScope:" + String(this.onStartScope)));
            };
            if (this.onUpdateScope){
                _local1 = (_local1 + (", onUpdateScope:" + String(this.onUpdateScope)));
            };
            if (this.onCompleteScope){
                _local1 = (_local1 + (", onCompleteScope:" + String(this.onCompleteScope)));
            };
            if (this.onOverwriteScope){
                _local1 = (_local1 + (", onOverwriteScope:" + String(this.onOverwriteScope)));
            };
            if (this.onErrorScope){
                _local1 = (_local1 + (", onErrorScope:" + String(this.onErrorScope)));
            };
            if (this.rounded){
                _local1 = (_local1 + (", rounded:" + String(this.rounded)));
            };
            if (this.isPaused){
                _local1 = (_local1 + (", isPaused:" + String(this.isPaused)));
            };
            if (this.timePaused){
                _local1 = (_local1 + (", timePaused:" + String(this.timePaused)));
            };
            if (this.isCaller){
                _local1 = (_local1 + (", isCaller:" + String(this.isCaller)));
            };
            if (this.count){
                _local1 = (_local1 + (", count:" + String(this.count)));
            };
            if (this.timesCalled){
                _local1 = (_local1 + (", timesCalled:" + String(this.timesCalled)));
            };
            if (this.waitFrames){
                _local1 = (_local1 + (", waitFrames:" + String(this.waitFrames)));
            };
            if (this.hasStarted){
                _local1 = (_local1 + (", hasStarted:" + String(this.hasStarted)));
            };
            _local1 = (_local1 + "]\n");
            return (_local1);
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {

    public class AuxFunctions {

        public static function numberToR(_arg1:Number):Number{
            return (((_arg1 & 0xFF0000) >> 16));
        }
        public static function numberToG(_arg1:Number):Number{
            return (((_arg1 & 0xFF00) >> 8));
        }
        public static function numberToB(_arg1:Number):Number{
            return ((_arg1 & 0xFF));
        }
        public static function getObjectLength(_arg1:Object):uint{
            var _local3:String;
            var _local2:uint;
            for (_local3 in _arg1) {
                _local2++;
            };
            return (_local2);
        }
        public static function concatObjects(... _args):Object{
            var _local3:Object;
            var _local5:String;
            var _local2:Object = {};
            var _local4:int;
            while (_local4 < _args.length) {
                _local3 = _args[_local4];
                for (_local5 in _local3) {
                    if (_local3[_local5] == null){
                        delete _local2[_local5];
                    } else {
                        _local2[_local5] = _local3[_local5];
                    };
                };
                _local4++;
            };
            return (_local2);
        }

    }
}//package caurina.transitions 
﻿package caurina.transitions {

    public class PropertyInfoObj {

        public var valueStart:Number;
        public var valueComplete:Number;
        public var originalValueComplete:Object;
        public var arrayIndex:Number;
        public var extra:Object;
        public var isSpecialProperty:Boolean;
        public var hasModifier:Boolean;
        public var modifierFunction:Function;
        public var modifierParameters:Array;

        public function PropertyInfoObj(_arg1:Number, _arg2:Number, _arg3:Object, _arg4:Number, _arg5:Object, _arg6:Boolean, _arg7:Function, _arg8:Array){
            this.valueStart = _arg1;
            this.valueComplete = _arg2;
            this.originalValueComplete = _arg3;
            this.arrayIndex = _arg4;
            this.extra = _arg5;
            this.isSpecialProperty = _arg6;
            this.hasModifier = Boolean(_arg7);
            this.modifierFunction = _arg7;
            this.modifierParameters = _arg8;
        }
        public function clone():PropertyInfoObj{
            var _local1:PropertyInfoObj = new PropertyInfoObj(this.valueStart, this.valueComplete, this.originalValueComplete, this.arrayIndex, this.extra, this.isSpecialProperty, this.modifierFunction, this.modifierParameters);
            return (_local1);
        }
        public function toString():String{
            var _local1 = "\n[PropertyInfoObj ";
            _local1 = (_local1 + ("valueStart:" + String(this.valueStart)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("valueComplete:" + String(this.valueComplete)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("originalValueComplete:" + String(this.originalValueComplete)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("arrayIndex:" + String(this.arrayIndex)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("extra:" + String(this.extra)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("isSpecialProperty:" + String(this.isSpecialProperty)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("hasModifier:" + String(this.hasModifier)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("modifierFunction:" + String(this.modifierFunction)));
            _local1 = (_local1 + ", ");
            _local1 = (_local1 + ("modifierParameters:" + String(this.modifierParameters)));
            _local1 = (_local1 + "]\n");
            return (_local1);
        }

    }
}//package caurina.transitions